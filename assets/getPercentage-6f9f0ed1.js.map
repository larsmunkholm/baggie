{"version":3,"file":"getPercentage-6f9f0ed1.js","sources":["../../packages/core/src/math/percentage/getPercentage/Example.tsx","../../packages/core/src/math/percentage/getPercentage/getPercentage.mdx"],"sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport { Source } from \"@storybook/blocks\";\nimport { InputWrapper } from \"@baggie/react\";\nimport { getPercentage } from \"./getPercentage\";\n\nexport const Example = (props: Parameters<typeof getPercentage>[0]) => {\n    const [part, setPart] = useState(props.part);\n    const [percentage, setPercentage] = useState(props.percentage);\n    const [whole, setWhole] = useState(props.whole);\n    const [percentageAsDecimal, setPercentageAsDecimal] = useState(true);\n\n    const [varsString, resultString, result] = useMemo(() => {\n        const showPart = typeof part === \"number\";\n        const showPercentage = typeof percentage === \"number\";\n        const showWhole = typeof whole === \"number\";\n\n        const partVar = showPart && `const part = ${part};`;\n        const percentageVar = showPercentage && `const percentage = ${percentage};`;\n        const wholeVar = showWhole && `const whole = ${whole};`;\n\n        const result = getPercentage(\n            // @ts-ignore\n            {\n                part: part as number,\n                percentage: percentage as number,\n                whole: whole as number,\n            },\n            percentageAsDecimal,\n        );\n\n        const realPercentage =\n            (showPercentage ? percentage : result) * (percentageAsDecimal ? 100 : 1);\n        const percentageAsDecimalString = percentageAsDecimal ? \"\" : \", false\";\n\n        const partResult =\n            !showPart &&\n            `\nconst part = getPercentage({ percentage, whole }${percentageAsDecimalString});\n// part = ${result}\n\n// ${realPercentage}% of ${whole as number} is ${result}`;\n        const percentageResult =\n            !showPercentage &&\n            `\nconst percentage = getPercentage({ part, whole }${percentageAsDecimalString});\n// percentage = ${result}\n\n// ${part as number} of ${whole as number} is ${realPercentage}%`;\n        const wholeResult =\n            !showWhole &&\n            `\nconst whole = getPercentage({ percentage, part }${percentageAsDecimalString});\n// whole = ${result}\n\n// ${part as number} is ${realPercentage}% of ${result}`;\n\n        return [\n            [partVar, percentageVar, wholeVar].filter((item) => item).join(\"\\n\"),\n            [partResult, percentageResult, wholeResult].filter((item) => item).join(\"\\n\"),\n            result,\n        ];\n    }, [part, percentage, whole, percentageAsDecimal]);\n\n    return (\n        <>\n            <div style={{ display: \"flex\", gap: \"10px\" }}>\n                {typeof part === \"number\" && (\n                    <InputWrapper label=\"Part\" labelForId=\"part-input\">\n                        <input\n                            id=\"part-input\"\n                            type=\"number\"\n                            value={part}\n                            onChange={({ target }) => setPart(target.valueAsNumber || 0)}\n                        />\n                    </InputWrapper>\n                )}\n                {typeof percentage === \"number\" && (\n                    <InputWrapper label=\"Percentage\" labelForId=\"percentage-input\">\n                        <input\n                            id=\"percentage-input\"\n                            type=\"number\"\n                            step={0.01}\n                            value={percentage}\n                            onChange={({ target }) => setPercentage(target.valueAsNumber || 0)}\n                        />\n                    </InputWrapper>\n                )}\n                {typeof whole === \"number\" && (\n                    <InputWrapper label=\"Whole\" labelForId=\"whole-input\">\n                        <input\n                            id=\"whole-input\"\n                            type=\"number\"\n                            value={whole}\n                            onChange={({ target }) => setWhole(target.valueAsNumber || 0)}\n                        />\n                    </InputWrapper>\n                )}\n                <InputWrapper\n                    label={\n                        typeof part !== \"number\"\n                            ? \"Part\"\n                            : typeof percentage !== \"number\"\n                            ? \"Percentage\"\n                            : typeof whole !== \"number\"\n                            ? \"Whole\"\n                            : \"\"\n                    }\n                    labelForId={undefined}\n                >\n                    <div style={{ padding: \"5px 0\" }}>{result}</div>\n                </InputWrapper>\n            </div>\n\n            <label>\n                <input\n                    type=\"checkbox\"\n                    checked={percentageAsDecimal}\n                    onChange={() => setPercentageAsDecimal((current) => !current)}\n                />{\" \"}\n                Percentage as decimal\n            </label>\n\n            <Source\n                dark\n                code={`\nimport { getPercentage } from \"@baggie/core\";\n\n${varsString}\n${resultString}\n`}\n            />\n        </>\n    );\n};\n","import { Example } from \"./Example\";\n\n# getPercentage\n\nPerform calculations with percentage.\n\n## Parameters\n\n| Parameter               | Type      | Required | Default value | Description                                                                |\n| :---------------------- | :-------- | :------: | :------------ | :------------------------------------------------------------------------- |\n| **properties**          | `object`  |    âœ”     |               | Two of the three properties must be defined. The third will be calculated. |\n| **percentageAsDecimal** | `boolean` |          | `true`        |                                                                            |\n\n| Property       | Type     |\n| :------------- | :------- |\n| **part**       | `number` |\n| **whole**      | `number` |\n| **percentage** | `number` |\n\n## Examples\n\nCalculate Z when **X is Y% of Z**\n\n<Example percentage={0.1} part={5} />\n\nCalculate Z when **X% of Y is Z**\n\n<Example percentage={0.1} whole={50} />\n\nCalculate Z when **X of Y is Z%**\n\n<Example part={5} whole={50} />\n"],"names":["Example","props","part","setPart","useState","percentage","setPercentage","whole","setWhole","percentageAsDecimal","setPercentageAsDecimal","varsString","resultString","result","useMemo","showPart","showPercentage","showWhole","partVar","percentageVar","wholeVar","result2","getPercentage","realPercentage","percentageAsDecimalString","partResult","percentageResult","wholeResult","item","jsxs","Fragment","jsx","InputWrapper","target","current","Source","MDXContent","MDXLayout","_provideComponents","_jsx","_createMdxContent","_components","_jsxs","_Fragment"],"mappings":"8bAKO,MAAAA,EAAAC,GAAA,CACH,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAAA,SAAAH,EAAA,IAAA,EACA,CAAAI,EAAAC,CAAA,EAAAF,EAAAA,SAAAH,EAAA,UAAA,EACA,CAAAM,EAAAC,CAAA,EAAAJ,EAAAA,SAAAH,EAAA,KAAA,EACA,CAAAQ,EAAAC,CAAA,EAAAN,EAAA,SAAA,EAAA,EAEA,CAAAO,EAAAC,EAAAC,CAAA,EAAAC,EAAA,QAAA,IAAA,CACI,MAAAC,EAAA,OAAAb,GAAA,SACAc,EAAA,OAAAX,GAAA,SACAY,EAAA,OAAAV,GAAA,SAEAW,EAAAH,GAAA,gBAAAb,CAAA,IACAiB,EAAAH,GAAA,sBAAAX,CAAA,IACAe,EAAAH,GAAA,iBAAAV,CAAA,IAEAc,EAAAC,EAAe,CAEX,KAAApB,EACI,WAAAG,EACA,MAAAE,CACA,EACJE,CACA,EAGJc,GAAAP,EAAAX,EAAAgB,IAAAZ,EAAA,IAAA,GAEAe,EAAAf,EAAA,GAAA,UAEAgB,EAAA,CAAAV,GAAA;AAAA,kDAEIS,CAAA;AAAA,YAC+DH,CAAA;AAAA;AAAA,KACzDE,CAAA,QAAAhB,CAAA,OAAAc,CAAA,GAGVK,EAAA,CAAAV,GAAA;AAAA,kDAEIQ,CAAA;AAAA,kBAC+DH,CAAA;AAAA;AAAA,KACnDnB,CAAA,OAAAK,CAAA,OAAAgB,CAAA,IAGhBI,EAAA,CAAAV,GAAA;AAAA,kDAEIO,CAAA;AAAA,aAC+DH,CAAA;AAAA;AAAA,KACxDnB,CAAA,OAAAqB,CAAA,QAAAF,CAAA,GAIX,MAAA,CAAO,CAAAH,EAAAC,EAAAC,CAAA,EAAA,OAAAQ,GAAAA,CAAA,EAAA,KAAA;AAAA,CAAA,EACgE,CAAAH,EAAAC,EAAAC,CAAA,EAAA,OAAAC,GAAAA,CAAA,EAAA,KAAA;AAAA,CAAA,EACSP,CAC5E,CACJ,EAAA,CAAAnB,EAAAG,EAAAE,EAAAE,CAAA,CAAA,EAGJ,OAAAoB,EAAA,KAAAC,WAAA,CAAA,SAAA,CAEQD,OAAA,MAAA,CAAA,MAAA,CAAA,QAAA,OAAA,IAAA,MAAA,EAAA,SAAA,CACK,OAAA3B,GAAA,UAAA6B,EAAA,IAAAC,EAAA,CAAA,MAAA,OAAA,WAAA,aAAA,SAAAD,EAAA,IAEO,QAAC,CAAA,GAAA,aACM,KAAA,SACE,MAAA7B,EACE,SAAA,CAAA,CAAA,OAAA+B,CAAA,IAAA9B,EAAA8B,EAAA,eAAA,CAAA,CACoD,CAAA,EAAA,EAEnE,OAAA5B,GAAA,UAAA0B,EAAA,IAAAC,EAAA,CAAA,MAAA,aAAA,WAAA,mBAAA,SAAAD,EAAA,IAII,QAAC,CAAA,GAAA,mBACM,KAAA,SACE,KAAA,IACC,MAAA1B,EACC,SAAA,CAAA,CAAA,OAAA4B,CAAA,IAAA3B,EAAA2B,EAAA,eAAA,CAAA,CAC0D,CAAA,EAAA,EAEzE,OAAA1B,GAAA,UAAAwB,EAAA,IAAAC,EAAA,CAAA,MAAA,QAAA,WAAA,cAAA,SAAAD,EAAA,IAII,QAAC,CAAA,GAAA,cACM,KAAA,SACE,MAAAxB,EACE,SAAA,CAAA,CAAA,OAAA0B,CAAA,IAAAzB,EAAAyB,EAAA,eAAA,CAAA,CACqD,CAAA,EAAA,EAEpEF,EAAA,IAEJC,EAAC,CAAA,MAAA,OAAA9B,GAAA,SAAA,OAAA,OAAAG,GAAA,SAAA,aAAA,OAAAE,GAAA,SAAA,QAAA,GAQa,WAAA,OAEE,SAAAwB,EAAAA,IAAA,MAAA,CAAA,MAAA,CAAA,QAAA,OAAA,EAAA,SAAAlB,EAAA,CAE8B,CAAA,CAC9C,EAAA,EACJgB,OAAA,QAAA,CAAA,SAAA,CAGIE,EAAA,IAAA,QAAC,CAAA,KAAA,WACQ,QAAAtB,EACI,SAAA,IAAAC,EAAAwB,GAAA,CAAAA,CAAA,CACmD,CAAA,EAChE,IAAG,uBAAI,EAAA,EAEXH,EAAA,IAEAI,EAAC,CAAA,KAAA,GACO,KAAA;AAAA;AAAA;AAAA,EACExB,CAAA;AAAA,EAGVC,CAAA;AAAA,CACE,CAAA,CAEF,CAAA,CAAA,CAGZ,gXCjIA,SAASwB,EAAWnC,EAAQ,GAAI,CAC9B,KAAM,CAAC,QAASoC,CAAS,EAAI,OAAO,OAAO,CAAE,EAAEC,EAAoB,EAAErC,EAAM,UAAU,EACrF,OAAOoC,EAAYE,EAAAA,IAAKF,EAAW,OAAO,OAAO,CAAE,EAAEpC,EAAO,CAC1D,SAAUsC,EAAAA,IAAKC,EAAmB,EAAE,CACxC,CAAG,CAAC,EAAIA,IACN,SAASA,GAAoB,CAC3B,MAAMC,EAAc,OAAO,OAAO,CAChC,GAAI,KACJ,EAAG,IACH,GAAI,KACJ,MAAO,QACP,MAAO,QACP,GAAI,KACJ,GAAI,KACJ,MAAO,QACP,GAAI,KACJ,OAAQ,SACR,KAAM,MACP,EAAEH,EAAoB,EAAErC,EAAM,UAAU,EACzC,OAAOyC,EAAAA,KAAMC,EAAAA,SAAW,CACtB,SAAU,CAACJ,EAAAA,IAAKE,EAAY,GAAI,CAC9B,GAAI,gBACJ,SAAU,eACX,CAAA,EAAG;AAAA,EAAMF,MAAKE,EAAY,EAAG,CAC5B,SAAU,uCACX,CAAA,EAAG;AAAA,EAAMF,MAAKE,EAAY,GAAI,CAC7B,GAAI,aACJ,SAAU,YACX,CAAA,EAAG;AAAA,EAAMC,OAAMD,EAAY,MAAO,CACjC,SAAU,CAACF,EAAAA,IAAKE,EAAY,MAAO,CACjC,SAAUC,EAAAA,KAAMD,EAAY,GAAI,CAC9B,SAAU,CAACF,EAAAA,IAAKE,EAAY,GAAI,CAC9B,MAAO,OACP,SAAU,WACxB,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,OACP,SAAU,MACxB,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,SACP,SAAU,UACxB,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,OACP,SAAU,eACxB,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,OACP,SAAU,aACxB,CAAa,CAAC,CACd,CAAW,CACX,CAAS,EAAGC,EAAAA,KAAMD,EAAY,MAAO,CAC3B,SAAU,CAACC,EAAAA,KAAMD,EAAY,GAAI,CAC/B,SAAU,CAACF,EAAAA,IAAKE,EAAY,GAAI,CAC9B,MAAO,OACP,SAAUF,EAAAA,IAAKE,EAAY,OAAQ,CACjC,SAAU,YAC1B,CAAe,CACf,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,OACP,SAAUF,EAAAA,IAAKE,EAAY,KAAM,CAC/B,SAAU,QAC1B,CAAe,CACf,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,SACP,SAAU,GACxB,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,MACrB,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,OACP,SAAU,4EACxB,CAAa,CAAC,CACd,CAAW,EAAGC,EAAAA,KAAMD,EAAY,GAAI,CACxB,SAAU,CAACF,EAAAA,IAAKE,EAAY,GAAI,CAC9B,MAAO,OACP,SAAUF,EAAAA,IAAKE,EAAY,OAAQ,CACjC,SAAU,qBAC1B,CAAe,CACf,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,OACP,SAAUF,EAAAA,IAAKE,EAAY,KAAM,CAC/B,SAAU,SAC1B,CAAe,CACf,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,QACrB,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,OACP,SAAUF,EAAAA,IAAKE,EAAY,KAAM,CAC/B,SAAU,MAC1B,CAAe,CACf,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,MACrB,CAAa,CAAC,CACd,CAAW,CAAC,CACZ,CAAS,CAAC,CACH,CAAA,EAAG;AAAA,EAAMC,OAAMD,EAAY,MAAO,CACjC,SAAU,CAACF,EAAAA,IAAKE,EAAY,MAAO,CACjC,SAAUC,EAAAA,KAAMD,EAAY,GAAI,CAC9B,SAAU,CAACF,EAAAA,IAAKE,EAAY,GAAI,CAC9B,MAAO,OACP,SAAU,UACxB,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,OACP,SAAU,MACxB,CAAa,CAAC,CACd,CAAW,CACX,CAAS,EAAGC,EAAAA,KAAMD,EAAY,MAAO,CAC3B,SAAU,CAACC,EAAAA,KAAMD,EAAY,GAAI,CAC/B,SAAU,CAACF,EAAAA,IAAKE,EAAY,GAAI,CAC9B,MAAO,OACP,SAAUF,EAAAA,IAAKE,EAAY,OAAQ,CACjC,SAAU,MAC1B,CAAe,CACf,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,OACP,SAAUF,EAAAA,IAAKE,EAAY,KAAM,CAC/B,SAAU,QAC1B,CAAe,CACf,CAAa,CAAC,CACd,CAAW,EAAGC,EAAAA,KAAMD,EAAY,GAAI,CACxB,SAAU,CAACF,EAAAA,IAAKE,EAAY,GAAI,CAC9B,MAAO,OACP,SAAUF,EAAAA,IAAKE,EAAY,OAAQ,CACjC,SAAU,OAC1B,CAAe,CACf,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,OACP,SAAUF,EAAAA,IAAKE,EAAY,KAAM,CAC/B,SAAU,QAC1B,CAAe,CACf,CAAa,CAAC,CACd,CAAW,EAAGC,EAAAA,KAAMD,EAAY,GAAI,CACxB,SAAU,CAACF,EAAAA,IAAKE,EAAY,GAAI,CAC9B,MAAO,OACP,SAAUF,EAAAA,IAAKE,EAAY,OAAQ,CACjC,SAAU,YAC1B,CAAe,CACf,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,OACP,SAAUF,EAAAA,IAAKE,EAAY,KAAM,CAC/B,SAAU,QAC1B,CAAe,CACf,CAAa,CAAC,CACd,CAAW,CAAC,CACZ,CAAS,CAAC,CACH,CAAA,EAAG;AAAA,EAAMF,MAAKE,EAAY,GAAI,CAC7B,GAAI,WACJ,SAAU,UACX,CAAA,EAAG;AAAA,EAAMC,OAAMD,EAAY,EAAG,CAC7B,SAAU,CAAC,oBAAqBF,MAAKE,EAAY,OAAQ,CACvD,SAAU,cACpB,CAAS,CAAC,CACV,CAAO,EAAG;AAAA,EAAMF,EAAI,IAACvC,EAAS,CACtB,WAAY,GACZ,KAAM,CACP,CAAA,EAAG;AAAA,EAAM0C,OAAMD,EAAY,EAAG,CAC7B,SAAU,CAAC,oBAAqBF,MAAKE,EAAY,OAAQ,CACvD,SAAU,cACpB,CAAS,CAAC,CACV,CAAO,EAAG;AAAA,EAAMF,EAAI,IAACvC,EAAS,CACtB,WAAY,GACZ,MAAO,EACR,CAAA,EAAG;AAAA,EAAM0C,OAAMD,EAAY,EAAG,CAC7B,SAAU,CAAC,oBAAqBF,MAAKE,EAAY,OAAQ,CACvD,SAAU,cACpB,CAAS,CAAC,CACV,CAAO,EAAG;AAAA,EAAMF,EAAI,IAACvC,EAAS,CACtB,KAAM,EACN,MAAO,EACf,CAAO,CAAC,CACR,CAAK,CACF,CACH"}