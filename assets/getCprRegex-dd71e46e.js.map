{"version":3,"file":"getCprRegex-dd71e46e.js","sources":["../../packages/core/src/string/regex/getCprRegex/Example.tsx","../../packages/core/src/string/regex/getCprRegex/getCprRegex.mdx"],"sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport { Source } from \"@storybook/blocks\";\nimport { InputWrapper } from \"@baggie/react\";\nimport { getCprRegex } from \"./getCprRegex\";\n\ninterface Props {\n    cprNumber: string;\n}\n\nexport const Example = (props: Props) => {\n    const [cpr, setCpr] = useState(props.cprNumber);\n    const isValid = useMemo(() => getCprRegex().test(cpr), [cpr]);\n\n    return (\n        <>\n            <InputWrapper label=\"CPR number\" labelForId=\"cpr-input\">\n                <input\n                    id=\"cpr-input\"\n                    value={cpr}\n                    onChange={({ target }) => setCpr(target.value)}\n                    spellCheck={false}\n                />\n            </InputWrapper>\n\n            <Source\n                dark\n                code={`\nimport { getCprRegex } from \"@baggie/core\";\n\nconst cprNumber = \"${cpr}\";\n\nconst isCprFormatValid = getCprRegex().test(cprNumber);\n// isCprFormatValid = ${isValid ? \"true\" : \"false\"}\n`}\n            />\n\n            <b>The returned regex:</b>\n\n            <Source dark code={`new RegExp(\"${getCprRegex().source}\", \"${getCprRegex().flags}\")`} />\n        </>\n    );\n};\n","import { Example } from \"./Example\";\n\n# getCprRegex\n\nA regular expression for validating the format of a Danish CPR number\n(personal identification number).\n\nWorks with the birthdate and the four control digits combined or separated\nby a dash or whitespace.\n\n> **Be aware** that this does not check if the CPR number is valid.\n> **It only checks if the format is correct.**\n>\n> This makes it useful for the pattern attribute in an input field.\n\n## Example\n\n<Example cprNumber=\"1706862134\" />\n"],"names":["Example","props","cpr","setCpr","useState","isValid","useMemo","getCprRegex","jsxs","Fragment","jsx","InputWrapper","target","Source","MDXContent","MDXLayout","_provideComponents","_jsx","_createMdxContent","_components","_jsxs","_Fragment"],"mappings":"wdASO,MAAAA,EAAAC,GAAA,CACH,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAAA,SAAAH,EAAA,SAAA,EACAI,EAAAC,UAAA,IAAAC,EAAA,EAAA,KAAAL,CAAA,EAAA,CAAAA,CAAA,CAAA,EAEA,OAAAM,EAAA,KAAAC,WAAA,CAAA,SAAA,CAEQC,EAAA,IAAAC,EAAA,CAAA,MAAA,aAAA,WAAA,YAAA,SAAAD,EAAA,IACI,QAAC,CAAA,GAAA,YACM,MAAAR,EACI,SAAA,CAAA,CAAA,OAAAU,CAAA,IAAAT,EAAAS,EAAA,KAAA,EACsC,WAAA,EACjC,CAAA,EAAA,EAEpBF,EAAA,IAEAG,EAAC,CAAA,KAAA,GACO,KAAA;AAAA;AAAA;AAAA,qBACEX,CAAA;AAAA;AAAA;AAAA,wBAGEG,EAAA,OAAA,OAAA;AAAA,CAG0B,CAAA,EAEtCK,EAAAA,IAAA,IAAA,CAAA,SAAA,qBAAA,CAAA,EAEsBA,EAAA,IAAAG,EAAA,CAAA,KAAA,GAAA,KAAA,eAAAN,EAAA,EAAA,MAAA,OAAAA,EAAA,EAAA,KAAA,KAAA,CAEgE,CAAA,CAAA,CAGlG,kMCrCA,SAASO,EAAWb,EAAQ,GAAI,CAC9B,KAAM,CAAC,QAASc,CAAS,EAAI,OAAO,OAAO,CAAE,EAAEC,EAAoB,EAAEf,EAAM,UAAU,EACrF,OAAOc,EAAYE,EAAAA,IAAKF,EAAW,OAAO,OAAO,CAAE,EAAEd,EAAO,CAC1D,SAAUgB,EAAAA,IAAKC,EAAmB,EAAE,CACxC,CAAG,CAAC,EAAIA,IACN,SAASA,GAAoB,CAC3B,MAAMC,EAAc,OAAO,OAAO,CAChC,GAAI,KACJ,EAAG,IACH,WAAY,aACZ,OAAQ,SACR,GAAI,IACL,EAAEH,EAAoB,EAAEf,EAAM,UAAU,EACzC,OAAOmB,EAAAA,KAAMC,EAAAA,SAAW,CACtB,SAAU,CAACJ,EAAAA,IAAKE,EAAY,GAAI,CAC9B,GAAI,cACJ,SAAU,aACX,CAAA,EAAG;AAAA,EAAMF,MAAKE,EAAY,EAAG,CAC5B,SAAU;AAAA,kCACX,CAAA,EAAG;AAAA,EAAMF,MAAKE,EAAY,EAAG,CAC5B,SAAU;AAAA,yBACX,CAAA,EAAG;AAAA,EAAMC,OAAMD,EAAY,WAAY,CACtC,SAAU,CAAC;AAAA,EAAMC,OAAMD,EAAY,EAAG,CACpC,SAAU,CAACF,EAAAA,IAAKE,EAAY,OAAQ,CAClC,SAAU,UACX,CAAA,EAAG;AAAA,EAA2DF,MAAKE,EAAY,OAAQ,CACtF,SAAU,0CACtB,CAAW,CAAC,CACH,CAAA,EAAG;AAAA,EAAMF,MAAKE,EAAY,EAAG,CAC5B,SAAU,mEACX,CAAA,EAAG;AAAA,CAAI,CACT,CAAA,EAAG;AAAA,EAAMF,MAAKE,EAAY,GAAI,CAC7B,GAAI,UACJ,SAAU,SAClB,CAAO,EAAG;AAAA,EAAMF,EAAI,IAACjB,EAAS,CACtB,UAAW,YACnB,CAAO,CAAC,CACR,CAAK,CACF,CACH"}