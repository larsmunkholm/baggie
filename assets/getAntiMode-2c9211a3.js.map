{"version":3,"file":"getAntiMode-2c9211a3.js","sources":["../../packages/core/src/math/average/getAntiMode/getAntiMode.ts","../../packages/core/src/math/average/getAntiMode/Example.tsx","../../packages/core/src/math/average/getAntiMode/getAntiMode.mdx"],"sourcesContent":["/**\n * Get the anti mode from an array of numbers.\n * The anti mode is the least frequent value in a data set.\n */\nexport const getAntiMode = (\n    numbers: number[],\n): { numbers: number[]; frequency: number } | undefined => {\n    const numbersMapping = numbers.reduce<\n        Record<string, { value: number; frequency: number }>\n    >((obj, cur) => {\n        if (typeof obj[cur] === \"undefined\") {\n            obj[cur] = {\n                value: cur,\n                frequency: 1,\n            };\n        } else {\n            obj[cur].frequency += 1;\n        }\n        return obj;\n    }, {});\n    return Object.values(numbersMapping)\n        .map(({ value, frequency }) => ({ value, frequency }))\n        .sort((a, b) =>\n            a.frequency < b.frequency ? -1 : a.frequency > b.frequency ? 1 : 0,\n        )\n        .filter((cur, _index, arr) => cur.frequency === arr[0].frequency)\n        .reduce<{ numbers: number[]; frequency: number }>(\n            (obj, cur) => ({\n                numbers: [...obj.numbers, cur.value],\n                frequency: cur.frequency,\n            }),\n            {\n                numbers: [],\n                frequency: 0,\n            },\n        );\n};\n","import React, { useMemo, useState } from \"react\";\nimport { Source } from \"@storybook/blocks\";\nimport { InputWrapper } from \"@baggie/react\";\nimport { getAntiMode } from \"./getAntiMode\";\n\ninterface Props {\n    defaultInput: number[];\n}\n\nexport const Example = (props: Props) => {\n    const [input, setInput] = useState(props.defaultInput.join(\", \"));\n\n    const { numbers, result } = useMemo(() => {\n        const numbers = input\n            .split(/\\s*,\\s*/)\n            .filter((value) => value.length)\n            .map((string) => (string.match(/^-?[0-9]*\\.?[0-9]*$/) ? parseFloat(string) : NaN));\n        return { numbers, result: getAntiMode(numbers) };\n    }, [input]);\n\n    return (\n        <>\n            <div style={{ display: \"flex\", gap: \"10px\" }}>\n                <InputWrapper label=\"Input\" labelForId=\"input-input\">\n                    <input\n                        id=\"input-input\"\n                        value={input}\n                        onChange={({ target }) => setInput(target.value)}\n                    />\n                </InputWrapper>\n\n                <InputWrapper label=\"Output\" labelForId={undefined}>\n                    <div style={{ padding: \"5px 0\" }}>\n                        {result ? `[${result.numbers.join(\", \")}]` : \"Error\"}\n                    </div>\n                </InputWrapper>\n            </div>\n\n            <Source\n                dark\n                code={`\nimport { getAntiMode } from \"@baggie/core\";\n\nconst numbers = [${numbers.join(\", \")}];\n\nconst result = getAntiMode(numbers);\n/*\nresult = ${JSON.stringify(result, null, 4)}\n*/\n`}\n            />\n        </>\n    );\n};\n","import { Example } from \"./Example\";\n\n# getAntiMode\n\nGet the anti mode from an array of numbers.<br />\nThe anti mode is the least frequent value in a data set.\n\nThere can be more than one anti mode if multiple values\nare repeated an equal amount of times.\n\n## Examples\n\n<Example defaultInput={[1, 2, 2, 3, 3, 3]} />\n\n<Example defaultInput={[8, 8, 8, -16, -16, 42, 42, 42]} />\n\n<Example defaultInput={[1, 2, 3]} />\n"],"names":["getAntiMode","numbers","numbersMapping","obj","cur","value","frequency","a","b","_index","arr","Example","props","input","setInput","useState","result","useMemo","numbers2","string","jsxs","Fragment","jsx","InputWrapper","target","Source","MDXContent","MDXLayout","_provideComponents","_jsx","_createMdxContent","_components","_jsxs","_Fragment"],"mappings":"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"}