import{j as e}from"./jsx-runtime-94f6e698.js";import{r as i}from"./index-8db94870.js";import{b as f}from"./index-c5be8d33.js";import{C as b}from"./ColorViewer-bde42da6.js";import{C as y}from"./ColorInput-4c318f10.js";import{c as C}from"./convertHslToRgb-a60e269c.js";import{c as S}from"./convertRgbToHsl-ef3890c5.js";import{c as v}from"./convertStringToRgb-e978940f.js";import{c as m}from"./convertRgbToHex-19fa32ed.js";import{I as x}from"./InputWrapper-088860b1.js";import{u as g}from"./index-1d576ef5.js";import"./_commonjsHelpers-042e6b4d.js";import"./iframe-71f486ec.js";import"../sb-preview/runtime.js";import"./index-d475d2ea.js";import"./index-80ae7d84.js";import"./index-d37d4223.js";import"./index-356e4a49.js";import"./isHexColor-1bfe6e6b.js";import"./convertColorNameToHex-5b896379.js";import"./convertRangePosition-216b6387.js";import"./getPositionBetween-b33d92a2.js";import"./getPercentageBetween-4e287335.js";const T=(r,n=3,l=12)=>{const t=typeof r=="string"?r:m(r),a=typeof r=="string"?v(r):r,{hue:s,saturation:d,lightness:c,alpha:o}=S(a),h=[t],j=360/l;for(let p=1;p<=n-1;p+=1)h[h.length]=m(C({hue:(s+j*p)%360,saturation:d,lightness:c,alpha:o}));return h},u=r=>{const[n,l]=i.useState(r.color),[t,a]=i.useState(r.count),[s,d]=i.useState(r.steps),c=i.useMemo(()=>{try{return T(n,t,s)}catch{return[]}},[n,t,s]);return e.jsxs(e.Fragment,{children:[e.jsxs("div",{style:{display:"flex",gap:"10px"},children:[e.jsx(y,{label:"Color",value:n,onChange:l}),e.jsx(x,{label:"Count",labelForId:"count-input",children:e.jsx("input",{id:"count-input",type:"number",value:t,onChange:({target:o})=>a(o.valueAsNumber)})}),e.jsx(x,{label:"Steps",labelForId:"steps-input",helperText:'Should be at least be the same as "count"',children:e.jsx("input",{id:"steps-input",type:"number",value:s,onChange:({target:o})=>d(o.valueAsNumber)})})]}),e.jsx("div",{style:{marginTop:"25px",display:"flex",flexWrap:"wrap",gap:"10px"},children:c.map(o=>e.jsx(b,{color:o},o))},`${n}--${t}--${s}`),e.jsx(f,{dark:!0,code:`
import { getColorSchemeAnalogous } from "@baggie/core";

const color = "${n}";
const count = ${t};
const steps = ${s};

const scheme = getColorSchemeAnalogous(color, count, steps);
/*
scheme = ${JSON.stringify(c,null,4)}
*/
`})]})};try{u.displayName="Example",u.__docgenInfo={description:"",displayName:"Example",props:{color:{defaultValue:null,description:"",name:"color",required:!0,type:{name:"string"}},count:{defaultValue:null,description:"",name:"count",required:!0,type:{name:"number"}},steps:{defaultValue:null,description:"",name:"steps",required:!0,type:{name:"number"}}}}}catch{}function B(r={}){const{wrapper:n}=Object.assign({},g(),r.components);return n?e.jsx(n,Object.assign({},r,{children:e.jsx(l,{})})):l();function l(){const t=Object.assign({h1:"h1",p:"p",h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",strong:"strong",code:"code"},g(),r.components);return e.jsxs(e.Fragment,{children:[e.jsx(t.h1,{id:"getcolorschemeanalogous",children:"getColorSchemeAnalogous"}),`
`,e.jsx(t.p,{children:"Get an analogous color scheme."}),`
`,e.jsx(t.p,{children:"These are colors that are next to each other on the color wheel."}),`
`,e.jsx(t.h2,{id:"parameters",children:"Parameters"}),`
`,e.jsxs(t.table,{children:[e.jsx(t.thead,{children:e.jsxs(t.tr,{children:[e.jsx(t.th,{align:"left",children:"Parameter"}),e.jsx(t.th,{align:"left",children:"Type"}),e.jsx(t.th,{align:"center",children:"Required"}),e.jsx(t.th,{align:"left",children:"Default value"}),e.jsx(t.th,{children:"Description"})]})}),e.jsxs(t.tbody,{children:[e.jsxs(t.tr,{children:[e.jsx(t.td,{align:"left",children:e.jsx(t.strong,{children:"color"})}),e.jsx(t.td,{align:"left",children:e.jsx(t.code,{children:"string"})}),e.jsx(t.td,{align:"center",children:"âœ”"}),e.jsx(t.td,{align:"left"}),e.jsx(t.td,{children:"The base color."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{align:"left",children:e.jsx(t.strong,{children:"count"})}),e.jsx(t.td,{align:"left",children:e.jsx(t.code,{children:"number"})}),e.jsx(t.td,{align:"center"}),e.jsx(t.td,{align:"left",children:e.jsx(t.code,{children:"3"})}),e.jsx(t.td,{children:"The amount of colors you want (including the base color)."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{align:"left",children:e.jsx(t.strong,{children:"steps"})}),e.jsx(t.td,{align:"left",children:e.jsx(t.code,{children:"number"})}),e.jsx(t.td,{align:"center"}),e.jsx(t.td,{align:"left",children:e.jsx(t.code,{children:"12"})}),e.jsxs(t.td,{children:["The number of steps you want the color spectrum split into.",e.jsx("br",{}),e.jsxs(t.strong,{children:["Should be equal to or larger than ",e.jsx(t.code,{children:"count"})]})]})]})]})]}),`
`,e.jsx(t.h2,{id:"example",children:"Example"}),`
`,e.jsx(u,{color:"#ffcc00",count:3,steps:12})]})}}export{B as default};
//# sourceMappingURL=getColorSchemeAnalogous-461ffc4f.js.map
