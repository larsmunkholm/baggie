{"version":3,"file":"useRefreshedToday-a07b1129.js","sources":["../../packages/react/src/hooks/useRefreshedToday/useRefreshedToday.mdx"],"sourcesContent":["import { Source } from \"@storybook/blocks\";\n\n# useRefreshedToday\n\nA hook that helps you know if a component was refreshed today.\n\nThis is useful in apps showing data that needs to change depending on the day.\nLike the current opening hours of a restaurant.\n\n## Examples\n\nReact (web):\n\n<Source dark code={`\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useRefreshedToday } from \"@baggie/react\";\n\nexport const StoreItem = () => {\n    const [storeData, setStoreData] = useState();\n    const { wasRefreshedToday, resetRefreshDate, updateRefreshDate } =\n        useRefreshedToday();\n\n    const getStoreData = useCallback(() => {\n        updateRefreshDate();\n\n        fetch(...)\n            .then((newData) => {\n                setStoreData(newData);\n            })\n            .catch(() => {\n                resetRefreshDate();\n            })\n    }, []);\n\n    useEffect(() => {\n        getStoreData();\n\n        const onFocus = () => {\n            if (!wasRefreshedToday()) {\n                // Component has not been refreshed today - do it now\n                getStoreData();\n            }\n        };\n\n        window.addEventListener(\"focus\", onFocus);\n        return () => window.removeEventListener(\"focus\", onFocus);\n    }, [getStoreData, wasRefreshedToday]);\n\n    return (...);\n};\n\n`} />\n\n\nReact Native:\n\n<Source dark code={`\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { AppState } from \"react-native\";\nimport { useRefreshedToday } from \"@baggie/react\";\n\nexport const StoreItem = () => {\n    const [storeData, setStoreData] = useState();\n    const { wasRefreshedToday, resetRefreshDate, updateRefreshDate } =\n        useRefreshedToday();\n\n    const getStoreData = useCallback(() => {\n        updateRefreshDate();\n\n        fetch(...)\n            .then((newData) => {\n                setStoreData(newData);\n            })\n            .catch(() => {\n                resetRefreshDate();\n            })\n    }, []);\n\n    useEffect(() => {\n        getStoreData();\n\n        const onFocus = AppState.addEventListener(\"change\", (status) => {\n            if (status === \"active\" && !wasRefreshedToday()) {\n                // Component has not been refreshed today - do it now\n                getStoreData();\n            }\n        });\n        return () => onFocus.remove();\n    }, [getStoreData, wasRefreshedToday]);\n\n    return (...);\n};\n\n`} />\n"],"names":["MDXContent","props","MDXLayout","_provideComponents","_jsx","_createMdxContent","_components","_jsxs","_Fragment","Source"],"mappings":"+WAIA,SAASA,EAAWC,EAAQ,GAAI,CAC9B,KAAM,CAAC,QAASC,CAAS,EAAI,OAAO,OAAO,CAAE,EAAEC,EAAoB,EAAEF,EAAM,UAAU,EACrF,OAAOC,EAAYE,EAAAA,IAAKF,EAAW,OAAO,OAAO,CAAE,EAAED,EAAO,CAC1D,SAAUG,EAAAA,IAAKC,EAAmB,EAAE,CACxC,CAAG,CAAC,EAAIA,IACN,SAASA,GAAoB,CAC3B,MAAMC,EAAc,OAAO,OAAO,CAChC,GAAI,KACJ,EAAG,IACH,GAAI,IACL,EAAEH,EAAoB,EAAEF,EAAM,UAAU,EACzC,OAAOM,EAAAA,KAAMC,EAAAA,SAAW,CACtB,SAAU,CAACJ,EAAAA,IAAKE,EAAY,GAAI,CAC9B,GAAI,oBACJ,SAAU,mBACX,CAAA,EAAG;AAAA,EAAMF,MAAKE,EAAY,EAAG,CAC5B,SAAU,gEACX,CAAA,EAAG;AAAA,EAAMF,MAAKE,EAAY,EAAG,CAC5B,SAAU;AAAA,gDACX,CAAA,EAAG;AAAA,EAAMF,MAAKE,EAAY,GAAI,CAC7B,GAAI,WACJ,SAAU,UACX,CAAA,EAAG;AAAA,EAAMF,MAAKE,EAAY,EAAG,CAC5B,SAAU,cAClB,CAAO,EAAG;AAAA,EAAMF,EAAI,IAACK,EAAQ,CACrB,KAAM,GACN,KAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAuCP,CAAA,EAAG;AAAA,EAAML,MAAKE,EAAY,EAAG,CAC5B,SAAU,eAClB,CAAO,EAAG;AAAA,EAAMF,EAAI,IAACK,EAAQ,CACrB,KAAM,GACN,KAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAsCd,CAAO,CAAC,CACR,CAAK,CACF,CACH"}