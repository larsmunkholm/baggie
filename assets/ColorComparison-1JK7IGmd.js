var G=Object.defineProperty;var K=(a,e,r)=>e in a?G(a,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):a[e]=r;var T=(a,e,r)=>(K(a,typeof e!="symbol"?e+"":e,r),r);import{j as t}from"./jsx-runtime-vNq4Oc-g.js";import{r as M}from"./index-4g5l5LRQ.js";import{b as Q}from"./index-XmUqo-P7.js";import{C as B}from"./ColorInput-p8BfKAZW.js";import{i as U}from"./isHexColor-CJQw1lzT.js";import{c as Y}from"./convertRgbToLab-02hlyaGw.js";import{c as $}from"./convertStringToRgb-i6fsHOdH.js";import{r as I}from"./radiansToDegrees-SsTpOcPD.js";import{d as p}from"./degreesToRadians-c8Y1PYMn.js";import{I as Z}from"./InputWrapper-7qBv-a2h.js";import{u as H}from"./index-Dbo06S9W.js";import"./_commonjsHelpers-4gQjN7DL.js";import"./iframe-aAGjdgm-.js";import"../sb-preview/runtime.js";import"./index-g30A4r-R.js";import"./index-aKxH7ZY0.js";import"./index-PPLHz8o0.js";import"./convertColorNameToHex-vzDEJkbb.js";import"./convertRangePosition-p6LuDhj_.js";import"./getPositionBetween-RxTUMZ_D.js";import"./getPercentageBetween-h4plVkI6.js";class w{constructor(e){T(this,"haystack",[]);e&&this.add(e)}static parseColorToLab(e){return"l"in e&&"a"in e&&"b"in e?{...e,alpha:e.alpha||1}:Y(e)}reset(){return this.haystack=[],this}add(e){return(Array.isArray(e)?e:[e]).forEach(r=>{const c=w.parseColorToLab($(r));this.haystack.push({...c,source:r})}),this}compare(e){if(this.haystack.length){const r=w.parseColorToLab($(e)),c=this.haystack.length,l=new Array(c),m=.01,d=Math.pow(25,7),u=Math.pow(r.b,2),s=Math.sqrt(Math.pow(r.a,2)+u);return this.haystack.forEach(o=>{const j=r.l-o.l,x=(o.l+r.l)/2,f=Math.pow(o.b,2),q=Math.sqrt(Math.pow(o.a,2)+f),_=(q+s)/2,E=1-Math.sqrt(Math.pow(_,7)/(Math.pow(_,7)+d)),b=o.a+o.a/2*E,A=r.a+r.a/2*E,y=Math.sqrt(Math.pow(b,2)+f),k=Math.sqrt(Math.pow(A,2)+u),C=(y+k)/2,F=k-y,N=1+.015*Math.pow(x-50,2)/Math.sqrt(20+Math.pow(x-50,2)),O=1+.045*C;let n=o.b===0||b===0?0:I(Math.atan2(o.b,b));n+=n>=0?0:360;let i=o.b===0||b===0?0:I(Math.atan2(r.b,A));i+=i>=0?0:360;const D=q===0||s===0?0:Math.abs(n-i)<=180?i-n:i<=n?i-n+360:i-n-360,W=2*Math.sqrt(y*k)*Math.sin(p(D)/2),g=Math.abs(n-i)>180?(n+i+360)/2:(n+i)/2,X=1-.17*Math.cos(p(g-30))+.24*Math.cos(p(2*g))+.32*Math.cos(p(3*g+6))-.2*Math.cos(p(4*g-63)),J=1+.015*C*X,V=-2*Math.sqrt(Math.pow(C,7)/(Math.pow(C,7)+Math.pow(25,7)))*Math.sin(p(60*Math.exp(-Math.pow((g-275)/25,2)))),z=j/(m*N),L=F/O,S=W/J,v=Math.sqrt(Math.pow(z,2)+Math.pow(L,2)+Math.pow(S,2)+V*L*S);for(let h=0;h<c;h+=1)if(l[h]){if(v<l[h].distance){l.splice(h,0,{distance:v,straw:o}),l.pop();break}}else{l[h]={distance:v,straw:o};break}}),l.map(o=>o.straw.source)}return[]}}const P=a=>{const[e,r]=M.useState(a.compareColor),[c,l]=M.useState(a.colors),m=M.useRef(new w(c)),d=M.useMemo(()=>c.filter(s=>U(s)),[c]),u=M.useMemo(()=>{try{return m.current.reset(),m.current.add(d),m.current.compare(e)}catch{return[]}},[d,e]);return t.jsxs(t.Fragment,{children:[t.jsx("div",{style:{display:"flex",gap:"10px",flexWrap:"wrap",marginBottom:"10px"},children:t.jsx(B,{label:"Compare color",value:e,onChange:s=>r(s)})}),t.jsxs("fieldset",{children:[t.jsx("legend",{children:"Palette"}),t.jsx("div",{style:{display:"flex",gap:"10px",flexWrap:"wrap"},children:c.map((s,o)=>t.jsx(B,{label:`Color ${o+1}`,value:s,onChange:j=>l(x=>{const f=[...x];return f[o]=j,f})},`${o}--${s}`))})]}),t.jsx("div",{style:{marginTop:20},children:t.jsx(Z,{label:"Sorted",labelForId:void 0,children:t.jsx("div",{style:{display:"grid",gridAutoColumns:"minmax(0, 1fr)",gridAutoFlow:"column"},children:u.map((s,o)=>t.jsx("div",{style:{height:"50px",background:s}},`nearest-${o}-${s}`))})})}),t.jsx(Q,{dark:!0,code:`
import { ColorComparison } from "@baggie/core";

const colors = ${JSON.stringify(d,null,4)};

const comparison = new ColorComparison(colors);

const sorted = comparison.compare("${e}");
/*
sorted = ${JSON.stringify(u,null,4)}
*/
`})]})};try{P.displayName="Example",P.__docgenInfo={description:"",displayName:"Example",props:{compareColor:{defaultValue:null,description:"",name:"compareColor",required:!0,type:{name:"string"}},colors:{defaultValue:null,description:"",name:"colors",required:!0,type:{name:"string[]"}}}}}catch{}function R(a){const e=Object.assign({h1:"h1",p:"p",blockquote:"blockquote",strong:"strong",a:"a",h2:"h2"},H(),a.components);return t.jsxs(t.Fragment,{children:[t.jsx(e.h1,{id:"colorcomparison",children:"ColorComparison"}),`
`,t.jsx(e.p,{children:"Find the nearest or farthest matching colors."}),`
`,t.jsx(e.p,{children:"Create a set of available or accepted colors, and in this set find the closest or farthest match to any other color."}),`
`,t.jsxs(e.blockquote,{children:[`
`,t.jsxs(e.p,{children:[t.jsx(e.strong,{children:"Nerd alert:"})," Colors are converted to the ",t.jsx(e.a,{href:"https://en.wikipedia.org/wiki/CIELAB_color_space",target:"_blank",rel:"nofollow noopener noreferrer",children:"CIELAB color space"}),`
(Lab), which is designed to be "perceptually uniform" with respect to human vision, meaning that the same amount of
numerical change in these values corresponds to about the same amount of visually perceived change. Colors are then
matched using the `,t.jsx(e.a,{href:"https://en.wikipedia.org/wiki/Euclidean_distance",target:"_blank",rel:"nofollow noopener noreferrer",children:"Euclidean distance"})," formula."]}),`
`]}),`
`,t.jsx(e.h2,{id:"example",children:"Example"}),`
`,t.jsx(P,{compareColor:"#ff7711",colors:["#ff0000","#ffff00","#ff00ff","#00ffff","#00ff00"]})]})}function je(a={}){const{wrapper:e}=Object.assign({},H(),a.components);return e?t.jsx(e,Object.assign({},a,{children:t.jsx(R,a)})):R(a)}export{je as default};
//# sourceMappingURL=ColorComparison-1JK7IGmd.js.map
