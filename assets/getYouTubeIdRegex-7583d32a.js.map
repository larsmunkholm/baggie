{"version":3,"file":"getYouTubeIdRegex-7583d32a.js","sources":["../../packages/core/src/string/regex/getYouTubeIdRegex/Example.tsx","../../packages/core/src/string/regex/getYouTubeIdRegex/getYouTubeIdRegex.mdx"],"sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport { Source } from \"@storybook/blocks\";\nimport { InputWrapper } from \"@baggie/react\";\nimport { getYouTubeIdRegex } from \"./getYouTubeIdRegex\";\n\ninterface Props {\n    string: string;\n}\n\nexport const Example = (props: Props) => {\n    const [string, setString] = useState(props.string);\n    const match = useMemo(() => string.match(getYouTubeIdRegex()), [string]);\n\n    return (\n        <>\n            <InputWrapper label=\"String\" labelForId=\"string-input\">\n                <textarea\n                    id=\"string-input\"\n                    value={string}\n                    onChange={({ target }) => setString(target.value)}\n                    style={{ width: \"100%\", maxWidth: \"360px\" }}\n                    spellCheck={false}\n                    rows={3}\n                />\n            </InputWrapper>\n\n            <Source\n                dark\n                code={`\nimport { getYouTubeIdRegex } from \"@baggie/core\";\n\nconst string = \"${string}\";\n\nconst matchYouTubeId = string.match(getYouTubeIdRegex());\n// matchYouTubeId = ${JSON.stringify(match)}\n`}\n            />\n\n            <b>The returned regex:</b>\n\n            <Source\n                dark\n                code={`new RegExp(\"${getYouTubeIdRegex().source}\", \"${getYouTubeIdRegex().flags}\")`}\n            />\n        </>\n    );\n};\n","import { Example } from \"./Example\";\n\n# getYouTubeIdRegex\n\nReturns regular expression for extracting the ID of a YouTube video from a\nURL.\n\nThis works with both the URLs of normal links, embedded videos and the\nshorter `youtu.be/{ID}`\n\n## Example\n\n<Example string=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\" />\n"],"names":["Example","props","string","setString","useState","match","useMemo","getYouTubeIdRegex","jsxs","Fragment","jsx","InputWrapper","target","Source","MDXContent","MDXLayout","_provideComponents","_jsx","_createMdxContent","_components","_jsxs","_Fragment"],"mappings":"8dASO,MAAAA,EAAAC,GAAA,CACH,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAAA,SAAAH,EAAA,MAAA,EACAI,EAAAC,UAAA,IAAAJ,EAAA,MAAAK,GAAA,EAAA,CAAAL,CAAA,CAAA,EAEA,OAAAM,EAAA,KAAAC,WAAA,CAAA,SAAA,CAEQC,EAAA,IAAAC,EAAA,CAAA,MAAA,SAAA,WAAA,eAAA,SAAAD,EAAA,IACI,WAAC,CAAA,GAAA,eACM,MAAAR,EACI,SAAA,CAAA,CAAA,OAAAU,CAAA,IAAAT,EAAAS,EAAA,KAAA,EACyC,MAAA,CAAA,MAAA,OAAA,SAAA,OAAA,EACN,WAAA,GAC9B,KAAA,CACN,CAAA,EAAA,EAEdF,EAAA,IAEAG,EAAC,CAAA,KAAA,GACO,KAAA;AAAA;AAAA;AAAA,kBACEX,CAAA;AAAA;AAAA;AAAA,sBAGE,KAAA,UAAAG,CAAA,CAAA;AAAA,CAGmB,CAAA,EAE/BK,EAAAA,IAAA,IAAA,CAAA,SAAA,qBAAA,CAAA,EAEsBA,EAAA,IAEtBG,EAAC,CAAA,KAAA,GACO,KAAA,eAAAN,IAAA,MAAA,OAAAA,EAAA,EAAA,KAAA,IAC2E,CAAA,CACnF,CAAA,CAAA,CAGZ,4LC1CA,SAASO,EAAWb,EAAQ,GAAI,CAC9B,KAAM,CAAC,QAASc,CAAS,EAAI,OAAO,OAAO,CAAE,EAAEC,EAAoB,EAAEf,EAAM,UAAU,EACrF,OAAOc,EAAYE,EAAAA,IAAKF,EAAW,OAAO,OAAO,CAAE,EAAEd,EAAO,CAC1D,SAAUgB,EAAAA,IAAKC,EAAmB,EAAE,CACxC,CAAG,CAAC,EAAIA,IACN,SAASA,GAAoB,CAC3B,MAAMC,EAAc,OAAO,OAAO,CAChC,GAAI,KACJ,EAAG,IACH,KAAM,OACN,GAAI,IACL,EAAEH,EAAoB,EAAEf,EAAM,UAAU,EACzC,OAAOmB,EAAAA,KAAMC,EAAAA,SAAW,CACtB,SAAU,CAACJ,EAAAA,IAAKE,EAAY,GAAI,CAC9B,GAAI,oBACJ,SAAU,mBACX,CAAA,EAAG;AAAA,EAAMF,MAAKE,EAAY,EAAG,CAC5B,SAAU;AAAA,KACX,CAAA,EAAG;AAAA,EAAMC,OAAMD,EAAY,EAAG,CAC7B,SAAU,CAAC;AAAA,UAAoFF,MAAKE,EAAY,KAAM,CACpH,SAAU,eACpB,CAAS,CAAC,CACH,CAAA,EAAG;AAAA,EAAMF,MAAKE,EAAY,GAAI,CAC7B,GAAI,UACJ,SAAU,SAClB,CAAO,EAAG;AAAA,EAAMF,EAAI,IAACjB,EAAS,CACtB,OAAQ,6CAChB,CAAO,CAAC,CACR,CAAK,CACF,CACH"}