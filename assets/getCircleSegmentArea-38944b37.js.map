{"version":3,"file":"getCircleSegmentArea-38944b37.js","sources":["../../packages/core/src/math/geometry/circle/getCircleSegmentArea/getCircleSegmentArea.ts","../../packages/core/src/math/geometry/circle/getCircleSegmentArea/Example.tsx","../../packages/core/src/math/geometry/circle/getCircleSegmentArea/getCircleSegmentArea.mdx"],"sourcesContent":["/**\n * Get the surface area of a segment of a circle given the radius\n * of the circle and the height of the segment.\n */\nexport const getCircleSegmentArea = (\n    radius: number,\n    segmentHeight: number,\n): number =>\n    Math.pow(radius, 2) * Math.acos((radius - segmentHeight) / radius) -\n    (radius - segmentHeight) *\n        Math.sqrt(2 * radius * segmentHeight - Math.pow(segmentHeight, 2));\n","import React, { useMemo, useState } from \"react\";\nimport { InputWrapper } from \"@baggie/react\";\nimport { Source } from \"@storybook/blocks\";\nimport { getPercentage } from \"../../../percentage/getPercentage/getPercentage\";\nimport { getCircleSegmentArea } from \"./getCircleSegmentArea\";\n\ninterface Props {\n    radius: number;\n    height: number;\n}\n\nexport const Example = (props: Props) => {\n    const [radius, setRadius] = useState(props.radius);\n    const [height, setHeight] = useState(props.height);\n\n    const surfaceArea = useMemo(\n        () => getCircleSegmentArea(radius || 0, height || 0),\n        [radius, height],\n    );\n\n    return (\n        <>\n            <div style={{ display: \"flex\", gap: \"10px\" }}>\n                <InputWrapper label=\"Radius\" labelForId=\"radius-input\">\n                    <input\n                        id=\"radius-input\"\n                        type=\"number\"\n                        value={radius}\n                        onChange={({ target }) => setRadius(target.valueAsNumber)}\n                    />\n                </InputWrapper>\n\n                <InputWrapper label=\"Height\" labelForId=\"height-input\">\n                    <input\n                        id=\"height-input\"\n                        type=\"number\"\n                        value={height}\n                        onChange={({ target }) => setHeight(target.valueAsNumber)}\n                    />\n                </InputWrapper>\n\n                <InputWrapper label=\"Surface area\" labelForId={undefined}>\n                    <div style={{ padding: \"5px 0\" }}>\n                        {isNaN(surfaceArea) ? \"Error\" : surfaceArea}\n                    </div>\n                </InputWrapper>\n            </div>\n\n            <div\n                style={{\n                    aspectRatio: 1,\n                    background: \"#FC0\",\n                    marginTop: \"20px\",\n                    borderRadius: \"50%\",\n                    position: \"relative\",\n                    display: \"inline-grid\",\n                    gridTemplateColumns: \"1fr 1fr\",\n                    alignItems: \"center\",\n                    pointerEvents: \"none\",\n                    userSelect: \"none\",\n                    overflow: \"hidden\",\n                }}\n            >\n                <div\n                    style={{\n                        position: \"absolute\",\n                        inset: \"2px\",\n                        borderRadius: \"50%\",\n                        overflow: \"hidden\",\n                    }}\n                >\n                    <div\n                        style={{\n                            position: \"absolute\",\n                            inset: 0,\n                            background: isNaN(surfaceArea)\n                                ? \"#900\"\n                                : `repeating-linear-gradient(-45deg, #900, #900 2px, #FC0 2px, #FC0 8px)`,\n                            transform: `translateY(${\n                                isNaN(surfaceArea)\n                                    ? 0\n                                    : 100 -\n                                      getPercentage(\n                                          {\n                                              part: height,\n                                              whole: radius * 2,\n                                          },\n                                          false,\n                                      )\n                            }%)`,\n                            transition: isNaN(surfaceArea) ? \"none\" : \"transform 0.4s ease-out\",\n                        }}\n                    />\n                </div>\n                <div />\n                <div\n                    style={{\n                        top: \"-0.75em\",\n                        position: \"relative\",\n                        borderBottom: \"1px solid #900\",\n                    }}\n                >\n                    <div style={{ lineHeight: \"1.5em\", padding: \"0 10px\", background: \"#FC0\" }}>\n                        r = {radius || 0}\n                    </div>\n                </div>\n            </div>\n\n            <Source\n                dark\n                code={`\nimport { getCircleSegmentArea } from \"@baggie/core\";\n\nconst radius = ${radius || 0};\nconst segmentHeight = ${height || 0};\n\nconst surfaceArea = getCircleSegmentArea(radius, segmentHeight);\n// surfaceArea = ${surfaceArea}\n`}\n            />\n        </>\n    );\n};\n","import { Example } from \"./Example\";\n\n# getCircleSegmentArea\n\nGet the surface area of a segment of a circle given the radius\nof the circle and the height of the segment.\n\n## Parameters\n\n| Parameter  | Type     | Required |\n| :--------- | :------- | :------: |\n| **radius** | `number` |    ✔     |\n| **height** | `number` |    ✔     |\n\n## Example\n\n<Example radius={10} height={10} />\n"],"names":["getCircleSegmentArea","radius","segmentHeight","Example","props","setRadius","useState","height","setHeight","surfaceArea","useMemo","jsxs","Fragment","jsx","InputWrapper","target","getPercentage","Source","MDXContent","MDXLayout","_provideComponents","_jsx","_createMdxContent","_components","_jsxs","_Fragment"],"mappings":"0dAIa,MAAAA,EAAuB,CAChCC,EACAC,IAEA,KAAK,IAAID,EAAQ,CAAC,EAAI,KAAK,MAAMA,EAASC,GAAiBD,CAAM,GAChEA,EAASC,GACN,KAAK,KAAK,EAAID,EAASC,EAAgB,KAAK,IAAIA,EAAe,CAAC,CAAC,ECClEC,EAAAC,GAAA,CACH,KAAA,CAAAH,EAAAI,CAAA,EAAAC,EAAAA,SAAAF,EAAA,MAAA,EACA,CAAAG,EAAAC,CAAA,EAAAF,EAAAA,SAAAF,EAAA,MAAA,EAEAK,EAAAC,EAAA,QAAoB,IAAAV,EAAAC,GAAA,EAAAM,GAAA,CAAA,EACmC,CAAAN,EAAAM,CAAA,CACpC,EAGnB,OAAAI,EAAA,KAAAC,WAAA,CAAA,SAAA,CAEQD,OAAA,MAAA,CAAA,MAAA,CAAA,QAAA,OAAA,IAAA,MAAA,EAAA,SAAA,CACIE,EAAA,IAAAC,EAAA,CAAA,MAAA,SAAA,WAAA,eAAA,SAAAD,EAAA,IACI,QAAC,CAAA,GAAA,eACM,KAAA,SACE,MAAAZ,EACE,SAAA,CAAA,CAAA,OAAAc,CAAA,IAAAV,EAAAU,EAAA,aAAA,CACiD,CAAA,EAAA,EAEhEF,EAAA,IAAAC,EAAA,CAAA,MAAA,SAAA,WAAA,eAAA,SAAAD,EAAA,IAGI,QAAC,CAAA,GAAA,eACM,KAAA,SACE,MAAAN,EACE,SAAA,CAAA,CAAA,OAAAQ,CAAA,IAAAP,EAAAO,EAAA,aAAA,CACiD,CAAA,EAAA,EAEhEF,MAAAC,EAAA,CAAA,MAAA,eAAA,WAAA,OAAA,SAAAD,EAAA,IAAA,MAAA,CAAA,MAAA,CAAA,QAAA,OAAA,EAAA,SAAA,MAAAJ,CAAA,EAAA,QAAAA,CAAA,CAAA,EAAA,CAMA,EAAA,EACJE,EAAA,KAEA,MAAC,CAAA,MAAA,CACU,YAAA,EACU,WAAA,OACD,UAAA,OACD,aAAA,MACG,SAAA,WACJ,QAAA,cACD,oBAAA,UACY,WAAA,SACT,cAAA,OACG,WAAA,OACH,SAAA,QACF,EACd,SAAA,CAEAE,EAAA,IAAA,MAAC,CAAA,MAAA,CACU,SAAA,WACO,MAAA,MACH,aAAA,MACO,SAAA,QACJ,EACd,SAAAA,EAAA,IAEA,MAAC,CAAA,MAAA,CACU,SAAA,WACO,MAAA,EACH,WAAA,MAAAJ,CAAA,EAAA,OAAA,wEAGD,UAAA,cAAA,MAAAA,CAAA,EAAA,EAAA,IAAAO,EAKI,CACI,KAAAT,EACU,MAAAN,EAAA,CACU,EACpB,EACA,CAAA,KAEd,WAAA,MAAAQ,CAAA,EAAA,OAAA,yBAC0C,CAC9C,CAAA,CACJ,CAAA,EACJI,EAAA,IAAA,MAAA,EAAA,EACKA,EAAA,IACL,MAAC,CAAA,MAAA,CACU,IAAA,UACE,SAAA,WACK,aAAA,gBACI,EAClB,SAAAF,EAAAA,KAAA,MAAA,CAAA,MAAA,CAAA,WAAA,QAAA,QAAA,SAAA,WAAA,MAAA,EAAA,SAAA,CAE4E,OAAAV,GAAA,CACzD,EAAA,CACnB,CAAA,CACJ,CAAA,CAAA,EACJY,EAAA,IAEAI,EAAC,CAAA,KAAA,GACO,KAAA;AAAA;AAAA;AAAA,iBACEhB,GAAA,CAAA;AAAA,wBAGMM,GAAA,CAAA;AAAA;AAAA;AAAA,mBACOE,CAAA;AAAA,CAGL,CAAA,CAElB,CAAA,CAAA,CAGZ,qRCtHA,SAASS,EAAWd,EAAQ,GAAI,CAC9B,KAAM,CAAC,QAASe,CAAS,EAAI,OAAO,OAAO,CAAE,EAAEC,EAAoB,EAAEhB,EAAM,UAAU,EACrF,OAAOe,EAAYE,EAAAA,IAAKF,EAAW,OAAO,OAAO,CAAE,EAAEf,EAAO,CAC1D,SAAUiB,EAAAA,IAAKC,EAAmB,EAAE,CACxC,CAAG,CAAC,EAAIA,IACN,SAASA,GAAoB,CAC3B,MAAMC,EAAc,OAAO,OAAO,CAChC,GAAI,KACJ,EAAG,IACH,GAAI,KACJ,MAAO,QACP,MAAO,QACP,GAAI,KACJ,GAAI,KACJ,MAAO,QACP,GAAI,KACJ,OAAQ,SACR,KAAM,MACP,EAAEH,EAAoB,EAAEhB,EAAM,UAAU,EACzC,OAAOoB,EAAAA,KAAMC,EAAAA,SAAW,CACtB,SAAU,CAACJ,EAAAA,IAAKE,EAAY,GAAI,CAC9B,GAAI,uBACJ,SAAU,sBACX,CAAA,EAAG;AAAA,EAAMF,MAAKE,EAAY,EAAG,CAC5B,SAAU;AAAA,6CACX,CAAA,EAAG;AAAA,EAAMF,MAAKE,EAAY,GAAI,CAC7B,GAAI,aACJ,SAAU,YACX,CAAA,EAAG;AAAA,EAAMC,OAAMD,EAAY,MAAO,CACjC,SAAU,CAACF,EAAAA,IAAKE,EAAY,MAAO,CACjC,SAAUC,EAAAA,KAAMD,EAAY,GAAI,CAC9B,SAAU,CAACF,EAAAA,IAAKE,EAAY,GAAI,CAC9B,MAAO,OACP,SAAU,WACxB,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,OACP,SAAU,MACxB,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,SACP,SAAU,UACxB,CAAa,CAAC,CACd,CAAW,CACX,CAAS,EAAGC,EAAAA,KAAMD,EAAY,MAAO,CAC3B,SAAU,CAACC,EAAAA,KAAMD,EAAY,GAAI,CAC/B,SAAU,CAACF,EAAAA,IAAKE,EAAY,GAAI,CAC9B,MAAO,OACP,SAAUF,EAAAA,IAAKE,EAAY,OAAQ,CACjC,SAAU,QAC1B,CAAe,CACf,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,OACP,SAAUF,EAAAA,IAAKE,EAAY,KAAM,CAC/B,SAAU,QAC1B,CAAe,CACf,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,SACP,SAAU,GACxB,CAAa,CAAC,CACd,CAAW,EAAGC,EAAAA,KAAMD,EAAY,GAAI,CACxB,SAAU,CAACF,EAAAA,IAAKE,EAAY,GAAI,CAC9B,MAAO,OACP,SAAUF,EAAAA,IAAKE,EAAY,OAAQ,CACjC,SAAU,QAC1B,CAAe,CACf,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,OACP,SAAUF,EAAAA,IAAKE,EAAY,KAAM,CAC/B,SAAU,QAC1B,CAAe,CACf,CAAa,EAAGF,EAAAA,IAAKE,EAAY,GAAI,CACvB,MAAO,SACP,SAAU,GACxB,CAAa,CAAC,CACd,CAAW,CAAC,CACZ,CAAS,CAAC,CACH,CAAA,EAAG;AAAA,EAAMF,MAAKE,EAAY,GAAI,CAC7B,GAAI,UACJ,SAAU,SAClB,CAAO,EAAG;AAAA,EAAMF,EAAI,IAAClB,EAAS,CACtB,OAAQ,GACR,OAAQ,EAChB,CAAO,CAAC,CACR,CAAK,CACF,CACH"}