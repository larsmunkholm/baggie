{"version":3,"file":"ColorComparison-e402f47f.js","sources":["../../packages/core/src/color/comparison/colorComparison.ts","../../packages/core/src/color/comparison/Example.tsx","../../packages/core/src/color/comparison/ColorComparison.mdx"],"sourcesContent":["import { degreesToRadians, radiansToDegrees } from \"../../math\";\nimport { CIELAB } from \"../_interfaces/cielab.interface\";\nimport { RGBA } from \"../_interfaces/rgba.interface\";\nimport { convertRgbToLab } from \"../convert/convertRgbToLab/convertRgbToLab\";\nimport { convertStringToRgb } from \"../convert/convertStringToRgb/convertStringToRgb\";\n\ninterface ColorHaystack extends CIELAB {\n    source: string;\n}\n\n/**\n * Find the nearest or farthest matching colors.\n */\nexport class ColorComparison {\n    private haystack: ColorHaystack[] = [];\n\n    /**\n     * Create a set of colors to search for the closest match in.\n     */\n    constructor(colors: string[]) {\n        if (colors) {\n            this.add(colors);\n        }\n    }\n\n    private static parseColorToLab(color: RGBA | CIELAB): CIELAB {\n        if (\"l\" in color && \"a\" in color && \"b\" in color) {\n            return {\n                ...color,\n                alpha: color.alpha || 1,\n            };\n        }\n\n        return convertRgbToLab(color);\n    }\n\n    reset(): this {\n        this.haystack = [];\n        return this;\n    }\n\n    add(colors: string | string[]): this {\n        (Array.isArray(colors) ? colors : [colors]).forEach((color) => {\n            const parsedColor = ColorComparison.parseColorToLab(\n                convertStringToRgb(color),\n            );\n            this.haystack.push({\n                ...parsedColor,\n                source: color,\n            });\n        });\n\n        return this;\n    }\n\n    compare(color: string) {\n        if (this.haystack.length) {\n            const needle = ColorComparison.parseColorToLab(\n                convertStringToRgb(color),\n            );\n            const iterations = this.haystack.length;\n            const results: {\n                distance: number;\n                straw: ColorHaystack;\n            }[] = new Array(iterations);\n\n            const lightnessWeight = 0.01;\n\n            const pow257 = Math.pow(25, 7);\n            const needleBPow2 = Math.pow(needle.b, 2);\n            const needleChroma = Math.sqrt(Math.pow(needle.a, 2) + needleBPow2);\n\n            this.haystack.forEach((straw) => {\n                const deltaLightnessPrime = needle.l - straw.l;\n                const lightnessBar = (straw.l + needle.l) / 2;\n                const strawBPow2 = Math.pow(straw.b, 2);\n\n                const strawChroma = Math.sqrt(\n                    Math.pow(straw.a, 2) + strawBPow2,\n                );\n                const chromaBar = (strawChroma + needleChroma) / 2;\n\n                const primeA =\n                    1 -\n                    Math.sqrt(\n                        Math.pow(chromaBar, 7) /\n                            (Math.pow(chromaBar, 7) + pow257),\n                    );\n                const strawPrimeA = straw.a + (straw.a / 2) * primeA;\n                const needlePrimeA = needle.a + (needle.a / 2) * primeA;\n                const strawChromaPrime = Math.sqrt(\n                    Math.pow(strawPrimeA, 2) + strawBPow2,\n                );\n                const needleChromaPrime = Math.sqrt(\n                    Math.pow(needlePrimeA, 2) + needleBPow2,\n                );\n                const chromaBarPrime =\n                    (strawChromaPrime + needleChromaPrime) / 2;\n                const deltaChromaPrime = needleChromaPrime - strawChromaPrime;\n                const SsubL =\n                    1 +\n                    (0.015 * Math.pow(lightnessBar - 50, 2)) /\n                        Math.sqrt(20 + Math.pow(lightnessBar - 50, 2));\n                const SsubC = 1 + 0.045 * chromaBarPrime;\n\n                let strawPrimeHue =\n                    straw.b === 0 || strawPrimeA === 0\n                        ? 0\n                        : radiansToDegrees(Math.atan2(straw.b, strawPrimeA));\n                strawPrimeHue += strawPrimeHue >= 0 ? 0 : 360;\n                let needlePrimeHue =\n                    straw.b === 0 || strawPrimeA === 0\n                        ? 0\n                        : radiansToDegrees(Math.atan2(needle.b, needlePrimeA));\n                needlePrimeHue += needlePrimeHue >= 0 ? 0 : 360;\n\n                const deltahPrime =\n                    strawChroma === 0 || needleChroma === 0\n                        ? 0\n                        : Math.abs(strawPrimeHue - needlePrimeHue) <= 180\n                        ? needlePrimeHue - strawPrimeHue\n                        : needlePrimeHue <= strawPrimeHue\n                        ? needlePrimeHue - strawPrimeHue + 360\n                        : needlePrimeHue - strawPrimeHue - 360;\n                const deltaHPrime =\n                    2 *\n                    Math.sqrt(strawChromaPrime * needleChromaPrime) *\n                    Math.sin(degreesToRadians(deltahPrime) / 2);\n                const HBarPrime =\n                    Math.abs(strawPrimeHue - needlePrimeHue) > 180\n                        ? (strawPrimeHue + needlePrimeHue + 360) / 2\n                        : (strawPrimeHue + needlePrimeHue) / 2;\n                const T =\n                    1 -\n                    0.17 * Math.cos(degreesToRadians(HBarPrime - 30)) +\n                    0.24 * Math.cos(degreesToRadians(2 * HBarPrime)) +\n                    0.32 * Math.cos(degreesToRadians(3 * HBarPrime + 6)) -\n                    0.2 * Math.cos(degreesToRadians(4 * HBarPrime - 63));\n                const SsubH = 1 + 0.015 * chromaBarPrime * T;\n                const RsubT =\n                    -2 *\n                    Math.sqrt(\n                        Math.pow(chromaBarPrime, 7) /\n                            (Math.pow(chromaBarPrime, 7) + Math.pow(25, 7)),\n                    ) *\n                    Math.sin(\n                        degreesToRadians(\n                            60 * Math.exp(-Math.pow((HBarPrime - 275) / 25, 2)),\n                        ),\n                    );\n\n                const lightness =\n                    deltaLightnessPrime / (lightnessWeight * SsubL);\n                const chroma = deltaChromaPrime / SsubC;\n                const hue = deltaHPrime / SsubH;\n\n                const distance = Math.sqrt(\n                    Math.pow(lightness, 2) +\n                        Math.pow(chroma, 2) +\n                        Math.pow(hue, 2) +\n                        RsubT * chroma * hue,\n                );\n\n                for (let i = 0; i < iterations; i += 1) {\n                    if (!results[i]) {\n                        results[i] = {\n                            distance,\n                            straw,\n                        };\n                        break;\n                    } else if (distance < results[i].distance) {\n                        results.splice(i, 0, {\n                            distance,\n                            straw,\n                        });\n                        results.pop();\n                        break;\n                    }\n                }\n            });\n\n            return results.map((result) => result.straw.source);\n        }\n\n        return [];\n    }\n}\n","import React, { useMemo, useRef, useState } from \"react\";\nimport { Source } from \"@storybook/blocks\";\nimport { InputWrapper } from \"@baggie/react\";\nimport { ColorInput } from \"../_components/ColorInput/ColorInput\";\nimport { isHexColor } from \"../check/isHexColor/isHexColor\";\nimport { ColorComparison } from \"./colorComparison\";\n\ninterface Props {\n    compareColor: string;\n    colors: string[];\n}\n\nexport const Example = (props: Props) => {\n    const [compareColor, setCompareColor] = useState(props.compareColor);\n    const [colors, setColors] = useState(props.colors);\n    const comparisonRef = useRef(new ColorComparison(colors));\n\n    const realColors = useMemo(() => colors.filter((color) => isHexColor(color)), [colors]);\n    const comparison = useMemo(() => {\n        try {\n            comparisonRef.current.reset();\n            comparisonRef.current.add(realColors);\n            return comparisonRef.current.compare(compareColor);\n        } catch (err) {\n            return [];\n        }\n    }, [realColors, compareColor]);\n\n    return (\n        <>\n            <div style={{ display: \"flex\", gap: \"10px\", flexWrap: \"wrap\", marginBottom: \"10px\" }}>\n                <ColorInput\n                    label=\"Compare color\"\n                    value={compareColor}\n                    onChange={(x) => setCompareColor(x)}\n                />\n            </div>\n\n            <fieldset>\n                <legend>Palette</legend>\n\n                <div style={{ display: \"flex\", gap: \"10px\", flexWrap: \"wrap\" }}>\n                    {colors.map((color, index) => (\n                        <ColorInput\n                            key={`${index}--${color}`}\n                            label={`Color ${index + 1}`}\n                            value={color}\n                            onChange={(nc) =>\n                                setColors((x) => {\n                                    const newColors = [...x];\n                                    newColors[index] = nc;\n                                    return newColors;\n                                })\n                            }\n                        />\n                    ))}\n                </div>\n            </fieldset>\n\n            <div style={{ marginTop: 20 }}>\n                <InputWrapper label=\"Sorted\" labelForId={undefined}>\n                    <div\n                        style={{\n                            display: \"grid\",\n                            gridAutoColumns: \"minmax(0, 1fr)\",\n                            gridAutoFlow: \"column\",\n                        }}\n                    >\n                        {comparison.map((x, index) => (\n                            <div\n                                key={`nearest-${index}-${x}`}\n                                style={{ height: \"50px\", background: x }}\n                            />\n                        ))}\n                    </div>\n                </InputWrapper>\n            </div>\n\n            <Source\n                dark\n                code={`\nimport { ColorComparison } from \"@baggie/core\";\n\nconst colors = ${JSON.stringify(realColors, null, 4)};\n\nconst comparison = new ColorComparison(colors);\n\nconst sorted = comparison.compare(\"${compareColor}\");\n/*\nsorted = ${JSON.stringify(comparison, null, 4)}\n*/\n`}\n            />\n        </>\n    );\n};\n","import { Example } from \"./Example\";\n\n# ColorComparison\n\nFind the nearest or farthest matching colors.\n\nCreate a set of available or accepted colors, and in this set find the closest or farthest match to any other color.\n\n> **Nerd alert:** Colors are converted to the [CIELAB color space](https://en.wikipedia.org/wiki/CIELAB_color_space)\n> (Lab), which is designed to be \"perceptually uniform\" with respect to human vision, meaning that the same amount of\n> numerical change in these values corresponds to about the same amount of visually perceived change. Colors are then\n> matched using the [Euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance) formula.\n\n## Example\n\n<Example compareColor=\"#ff7711\" colors={[\"#ff0000\", \"#ffff00\", \"#ff00ff\", \"#00ffff\", \"#00ff00\"]} />\n"],"names":["ColorComparison","colors","__publicField","color","convertRgbToLab","parsedColor","convertStringToRgb","needle","iterations","results","lightnessWeight","pow257","needleBPow2","needleChroma","straw","deltaLightnessPrime","lightnessBar","strawBPow2","strawChroma","chromaBar","primeA","strawPrimeA","needlePrimeA","strawChromaPrime","needleChromaPrime","chromaBarPrime","deltaChromaPrime","SsubL","SsubC","strawPrimeHue","radiansToDegrees","needlePrimeHue","deltahPrime","deltaHPrime","degreesToRadians","HBarPrime","T","SsubH","RsubT","lightness","chroma","hue","distance","i","result","Example","props","compareColor","setCompareColor","useState","setColors","comparisonRef","useRef","realColors","useMemo","isHexColor","comparison","jsxs","Fragment","jsx","ColorInput","x","index","nc","newColors","InputWrapper","Source","_createMdxContent","_components","_provideComponents","_jsxs","_Fragment","_jsx","MDXContent","MDXLayout"],"mappings":"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"}