{"version":3,"file":"getMedian-957b20e7.js","sources":["../../packages/core/src/math/average/getMedian/getMedian.ts","../../packages/core/src/math/average/getMedian/Example.tsx","../../packages/core/src/math/average/getMedian/getMedian.mdx"],"sourcesContent":["import { getMean } from \"../getMean/getMean\";\n\n/**\n * Get the median from an array of numbers.\n */\nexport const getMedian = (numbers: number[]): number => {\n    const numbersCount = numbers.length;\n    const halfOfNumbersCount = Math.floor(numbersCount / 2);\n\n    // Put the array of numbers in ascending order (small to large)\n    const sortedNumbers = [...numbers].sort((a: number, b: number) => a - b);\n\n    return numbersCount\n        ? !(numbersCount % 2)\n            ? // If the amount of numbers is even, the median is the mean of the two middle numbers\n              getMean([\n                  sortedNumbers[halfOfNumbersCount - 1],\n                  sortedNumbers[halfOfNumbersCount],\n              ])\n            : // If the amount of numbers is odd, the median is the middle number\n              sortedNumbers[halfOfNumbersCount]\n        : 0;\n};\n","import React, { useMemo, useState } from \"react\";\nimport { Source } from \"@storybook/blocks\";\nimport { InputWrapper } from \"@baggie/react\";\nimport { getMedian } from \"./getMedian\";\n\ninterface Props {\n    defaultInput: number[];\n}\n\nexport const Example = (props: Props) => {\n    const [input, setInput] = useState(props.defaultInput.join(\", \"));\n\n    const { numbers, result } = useMemo(() => {\n        const numbers = input\n            .split(/\\s*,\\s*/)\n            .filter((value) => value.length)\n            .map((string) => (string.match(/^-?[0-9]*\\.?[0-9]*$/) ? parseFloat(string) : NaN));\n        return { numbers, result: getMedian(numbers) };\n    }, [input]);\n\n    return (\n        <>\n            <div style={{ display: \"flex\", gap: \"10px\" }}>\n                <InputWrapper label=\"Input\" labelForId=\"input-input\">\n                    <input\n                        id=\"input-input\"\n                        value={input}\n                        onChange={({ target }) => setInput(target.value)}\n                    />\n                </InputWrapper>\n\n                <InputWrapper label=\"Median\" labelForId={undefined}>\n                    <div style={{ padding: \"5px 0\" }}>{isNaN(result) ? \"Error\" : result}</div>\n                </InputWrapper>\n            </div>\n\n            <Source\n                dark\n                code={`\nimport { getMedian } from \"@baggie/core\";\n\nconst numbers = [${numbers.join(\", \")}];\n\nconst median = getMedian(numbers);\n// median = ${result}\n`}\n            />\n        </>\n    );\n};\n","import { Example } from \"./Example\";\n\n# getMedian\n\nGet the median from an array of numbers.\n\nThe median is the middle value or, if two middle values,\nthe mean of those two with the numbers in ascending order.\n\n## Examples\n\n<Example defaultInput={[1, 2, 3]} />\n\n<Example defaultInput={[1, 1, 1]} />\n\n<Example defaultInput={[4, 8, 15, 16, 23, 42]} />\n"],"names":["getMedian","numbers","numbersCount","halfOfNumbersCount","sortedNumbers","b","getMean","Example","props","input","setInput","useState","result","useMemo","numbers2","value","string","jsxs","Fragment","jsx","InputWrapper","target","Source","_createMdxContent","_components","_provideComponents","_jsxs","_Fragment","_jsx","MDXContent","MDXLayout"],"mappings":"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"}