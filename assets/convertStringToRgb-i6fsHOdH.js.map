{"version":3,"file":"convertStringToRgb-i6fsHOdH.js","sources":["../../packages/core/src/color/convert/convertStringToRgb/convertStringToRgb.ts"],"sourcesContent":["import { convertRangePosition } from \"../../../math\";\nimport { RGBA } from \"../../_interfaces/rgba.interface\";\nimport { isHexColor } from \"../../check/isHexColor/isHexColor\";\n\nconst rgbRegExp =\n    /rgba?\\(\\s*([.e0-9]+%?)\\s*,\\s*([.e0-9]+%?)\\s*,\\s*([.e0-9]+%?)\\s*(?:,\\s*([.e0-9]+)\\s*)?\\)/;\nconst isRgbColor = (input: string) => rgbRegExp.test(input);\n\n/**\n * Convert a hex color to an object with RGB color values.\n */\nexport const convertStringToRgb = (input: string): RGBA => {\n    if (isHexColor(input)) {\n        const match = input.slice(1);\n\n        if (match.length === 3 || match.length === 4) {\n            const rgb = [\n                match.charAt(0),\n                match.charAt(1),\n                match.charAt(2),\n                match.charAt(3) || \"F\",\n            ];\n\n            return {\n                red: parseInt(rgb[0] + rgb[0], 16),\n                green: parseInt(rgb[1] + rgb[1], 16),\n                blue: parseInt(rgb[2] + rgb[2], 16),\n                alpha: parseInt(rgb[3] + rgb[3], 16) / 255,\n            };\n        } else {\n            const rgb = [\n                match.charAt(0) + match.charAt(1),\n                match.charAt(2) + match.charAt(3),\n                match.charAt(4) + match.charAt(5),\n                match.charAt(7) ? match.charAt(6) + match.charAt(7) : \"FF\",\n            ];\n\n            return {\n                red: parseInt(rgb[0], 16),\n                green: parseInt(rgb[1], 16),\n                blue: parseInt(rgb[2], 16),\n                alpha: parseInt(rgb[3], 16) / 255,\n            };\n        }\n    } else if (isRgbColor(input)) {\n        const [_match, red, green, blue, alpha] = input.match(\n            rgbRegExp,\n        ) as RegExpMatchArray;\n        return {\n            red: red.endsWith(\"%\")\n                ? Math.round(\n                      convertRangePosition(\n                          parseInt(red.slice(0, -1)),\n                          { from: 0, to: 100 },\n                          { from: 0, to: 255 },\n                      ),\n                  )\n                : parseInt(red),\n            green: green.endsWith(\"%\")\n                ? Math.round(\n                      convertRangePosition(\n                          parseInt(green.slice(0, -1)),\n                          { from: 0, to: 100 },\n                          { from: 0, to: 255 },\n                      ),\n                  )\n                : parseInt(green),\n            blue: blue.endsWith(\"%\")\n                ? Math.round(\n                      convertRangePosition(\n                          parseInt(blue.slice(0, -1)),\n                          { from: 0, to: 100 },\n                          { from: 0, to: 255 },\n                      ),\n                  )\n                : parseInt(blue),\n            alpha: alpha ? parseFloat(alpha) : 0,\n        };\n    }\n\n    throw \"Not a valid color string\";\n};\n"],"names":["rgbRegExp","isRgbColor","input","convertStringToRgb","isHexColor","match","rgb","_match","red","green","blue","alpha","convertRangePosition"],"mappings":"oGAIA,MAAMA,EACF,0FACEC,EAAcC,GAAkBF,EAAU,KAAKE,CAAK,EAK7CC,EAAsBD,GAAwB,CACnD,GAAAE,EAAWF,CAAK,EAAG,CACb,MAAAG,EAAQH,EAAM,MAAM,CAAC,EAE3B,GAAIG,EAAM,SAAW,GAAKA,EAAM,SAAW,EAAG,CAC1C,MAAMC,EAAM,CACRD,EAAM,OAAO,CAAC,EACdA,EAAM,OAAO,CAAC,EACdA,EAAM,OAAO,CAAC,EACdA,EAAM,OAAO,CAAC,GAAK,GAAA,EAGhB,MAAA,CACH,IAAK,SAASC,EAAI,CAAC,EAAIA,EAAI,CAAC,EAAG,EAAE,EACjC,MAAO,SAASA,EAAI,CAAC,EAAIA,EAAI,CAAC,EAAG,EAAE,EACnC,KAAM,SAASA,EAAI,CAAC,EAAIA,EAAI,CAAC,EAAG,EAAE,EAClC,MAAO,SAASA,EAAI,CAAC,EAAIA,EAAI,CAAC,EAAG,EAAE,EAAI,GAAA,CAC3C,KACG,CACH,MAAMA,EAAM,CACRD,EAAM,OAAO,CAAC,EAAIA,EAAM,OAAO,CAAC,EAChCA,EAAM,OAAO,CAAC,EAAIA,EAAM,OAAO,CAAC,EAChCA,EAAM,OAAO,CAAC,EAAIA,EAAM,OAAO,CAAC,EAChCA,EAAM,OAAO,CAAC,EAAIA,EAAM,OAAO,CAAC,EAAIA,EAAM,OAAO,CAAC,EAAI,IAAA,EAGnD,MAAA,CACH,IAAK,SAASC,EAAI,CAAC,EAAG,EAAE,EACxB,MAAO,SAASA,EAAI,CAAC,EAAG,EAAE,EAC1B,KAAM,SAASA,EAAI,CAAC,EAAG,EAAE,EACzB,MAAO,SAASA,EAAI,CAAC,EAAG,EAAE,EAAI,GAAA,CAEtC,CAAA,SACOL,EAAWC,CAAK,EAAG,CAC1B,KAAM,CAACK,EAAQC,EAAKC,EAAOC,EAAMC,CAAK,EAAIT,EAAM,MAC5CF,CAAA,EAEG,MAAA,CACH,IAAKQ,EAAI,SAAS,GAAG,EACf,KAAK,MACDI,EACI,SAASJ,EAAI,MAAM,EAAG,EAAE,CAAC,EACzB,CAAE,KAAM,EAAG,GAAI,GAAI,EACnB,CAAE,KAAM,EAAG,GAAI,GAAI,CACvB,CAAA,EAEJ,SAASA,CAAG,EAClB,MAAOC,EAAM,SAAS,GAAG,EACnB,KAAK,MACDG,EACI,SAASH,EAAM,MAAM,EAAG,EAAE,CAAC,EAC3B,CAAE,KAAM,EAAG,GAAI,GAAI,EACnB,CAAE,KAAM,EAAG,GAAI,GAAI,CACvB,CAAA,EAEJ,SAASA,CAAK,EACpB,KAAMC,EAAK,SAAS,GAAG,EACjB,KAAK,MACDE,EACI,SAASF,EAAK,MAAM,EAAG,EAAE,CAAC,EAC1B,CAAE,KAAM,EAAG,GAAI,GAAI,EACnB,CAAE,KAAM,EAAG,GAAI,GAAI,CACvB,CAAA,EAEJ,SAASA,CAAI,EACnB,MAAOC,EAAQ,WAAWA,CAAK,EAAI,CAAA,CAE3C,CAEM,KAAA,0BACV"}