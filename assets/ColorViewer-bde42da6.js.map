{"version":3,"file":"ColorViewer-bde42da6.js","sources":["../../packages/core/src/color/_components/ColorViewer/ColorViewer.tsx"],"sourcesContent":["import React, { useMemo } from \"react\";\nimport { isHexColor } from \"../../check/isHexColor/isHexColor\";\nimport S from \"./ColorViewer.module.scss\";\n\ninterface Props {\n    color: string | undefined;\n    splitColor?: string;\n}\n\nexport const ColorViewer = ({ color, splitColor }: Props) => {\n    const isSplit = useMemo(() => typeof splitColor === \"string\", [splitColor]);\n    const isValidA = useMemo(\n        () => (color ? isHexColor(color) : false),\n        [color],\n    );\n    const isValidB = useMemo(\n        () => (isSplit ? isHexColor(splitColor as string) : false),\n        [isSplit, splitColor],\n    );\n\n    return (\n        <div className={S.wrapper}>\n            <div className={S.insideWrapper}>\n                {(isValidA && (!isSplit || isValidB)) || (\n                    <svg\n                        height=\"100px\"\n                        width=\"100px\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        viewBox=\"0 0 31 31\"\n                        className={S.crossSvg}\n                    >\n                        <g transform=\"rotate(45 15.5 15.5)\" fill=\"#900\">\n                            <rect x=\"15\" y=\"5\" width=\"1\" height=\"21\" />\n                            <rect x=\"5\" y=\"15\" width=\"21\" height=\"1\" />\n                        </g>\n                    </svg>\n                )}\n\n                <div\n                    className={S.colorA}\n                    style={{\n                        border: `50px solid ${\n                            isSplit || !isValidA\n                                ? \"transparent\"\n                                : (color as string)\n                        }`,\n                        borderTopColor: isValidA ? color : \"transparent\",\n                        borderLeftColor: isValidA ? color : \"transparent\",\n                    }}\n                />\n                {isSplit ? (\n                    <div\n                        className={S.colorB}\n                        style={{\n                            borderRightColor: isValidB\n                                ? splitColor\n                                : \"transparent\",\n                            borderBottomColor: isValidB\n                                ? splitColor\n                                : \"transparent\",\n                        }}\n                    />\n                ) : null}\n            </div>\n            {isSplit || <div className={S.text}>{color}</div>}\n        </div>\n    );\n};\n"],"names":["ColorViewer","color","splitColor","isSplit","useMemo","isValidA","isHexColor","isValidB","jsxs","S","jsx"],"mappings":"+UASOA,EAAA,CAAA,CAAA,MAAAC,EAAA,WAAAC,KAAA,CACH,MAAAC,EAAAC,EAAAA,QAAA,IAAA,OAAAF,GAAA,SAAA,CAAAA,CAAA,CAAA,EACAG,EAAAD,EAAA,QAAiB,IAAAH,EAAAK,EAAAL,CAAA,EAAA,GACsB,CAAAA,CAAA,CAC7B,EAEVM,EAAAH,EAAA,QAAiB,IAAAD,EAAAG,EAAAJ,CAAA,EAAA,GACuC,CAAAC,EAAAD,CAAA,CAChC,EAGxB,OAAAM,EAAAA,KAAA,MAAA,CAAA,UAAAC,EAAA,QAAA,SAAA,CAEQD,EAAA,KAAA,MAAA,CAAA,UAAAC,EAAA,cAAA,SAAA,CACMJ,IAAA,CAAAF,GAAAI,IAAAG,EAAA,IACE,MAAC,CAAA,OAAA,QACU,MAAA,QACD,MAAA,6BACA,QAAA,YACE,UAAAD,EAAA,SACK,SAAAD,EAAAA,KAAA,IAAA,CAAA,UAAA,uBAAA,KAAA,OAAA,SAAA,CAGTE,EAAAA,IAAA,OAAA,CAAA,EAAA,KAAA,EAAA,IAAA,MAAA,IAAA,OAAA,IAAA,CAAA,EAAyCA,EAAAA,IAAA,OAAA,CAAA,EAAA,IAAA,EAAA,KAAA,MAAA,KAAA,OAAA,GAAA,CAAA,CACA,EAAA,CAC7C,CAAA,EACJA,EAAA,IAGJ,MAAC,CAAA,UAAAD,EAAA,OACgB,MAAA,CACN,OAAA,cAAAN,GAAA,CAAAE,EAAA,cAAAJ,CAAA,GAKH,eAAAI,EAAAJ,EAAA,cACmC,gBAAAI,EAAAJ,EAAA,aACC,CACxC,CAAA,EACJE,EAAAO,EAAA,IAEI,MAAC,CAAA,UAAAD,EAAA,OACgB,MAAA,CACN,iBAAAF,EAAAL,EAAA,cAGG,kBAAAK,EAAAL,EAAA,aAGA,CACV,CAAA,EAAA,IAEJ,EAAA,EACRC,GAAAO,EAAAA,IAAA,MAAA,CAAA,UAAAD,EAAA,KAAA,SAAAR,EAAA,CAC2C,CAAA,CAAA,CAGvD"}