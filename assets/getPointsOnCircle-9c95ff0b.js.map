{"version":3,"file":"getPointsOnCircle-9c95ff0b.js","sources":["../../packages/core/src/math/geometry/circle/getPointsOnCircle/getPointsOnCircle.ts","../../packages/core/src/math/geometry/circle/getPointsOnCircle/Example.tsx","../../packages/core/src/math/geometry/circle/getPointsOnCircle/getPointsOnCircle.mdx"],"sourcesContent":["import { degreesToRadians } from \"../../../radians/degreesToRadians\";\nimport { getPercentage } from \"../../../percentage/getPercentage/getPercentage\";\n\ninterface GetPointsOnCircleProperties {\n    radius: number;\n    numberOfPoints: number;\n    offset?: number;\n}\n\ninterface GetPointsOnCircleReturn {\n    degrees: number;\n    x: number;\n    y: number;\n}\n\n/**\n * Get an array of equally distanced points on the perimeter of a circle.\n */\nexport const getPointsOnCircle = ({\n    radius,\n    numberOfPoints,\n    offset = 0,\n}: GetPointsOnCircleProperties): GetPointsOnCircleReturn[] => {\n    const result = [];\n\n    const degreesToFirstPoint =\n        getPercentage({ part: 1, whole: numberOfPoints }) * 360;\n\n    for (let i = 1; i <= numberOfPoints; i += 1) {\n        let degrees =\n            getPercentage({ part: i, whole: numberOfPoints }) * 360 -\n            degreesToFirstPoint +\n            (offset % 360);\n        const radians = degreesToRadians(degrees - 90);\n\n        degrees = degrees < 0 ? 360 + degrees : degrees;\n\n        result.push({\n            degrees,\n            x: radius * Math.cos(radians),\n            y: radius * Math.sin(radians),\n        });\n    }\n\n    return result;\n};\n","import React, { useMemo, useState } from \"react\";\nimport { InputWrapper } from \"@baggie/react\";\nimport { Source } from \"@storybook/blocks\";\nimport { getPointsOnCircle } from \"./getPointsOnCircle\";\n\ninterface Props {\n    radius: number;\n    numberOfPoints: number;\n    offset: number;\n}\n\nexport const Example = (props: Props) => {\n    const [radius, setRadius] = useState(props.radius);\n    const [numberOfPoints, setNumberOfPoints] = useState(props.numberOfPoints);\n    const [offset, setOffset] = useState(props.offset);\n\n    const points = useMemo(\n        () =>\n            getPointsOnCircle({\n                radius: radius || 1,\n                numberOfPoints: Math.min(numberOfPoints || 0, 30),\n                offset: offset || 0,\n            }),\n        [radius, numberOfPoints, offset],\n    );\n\n    return (\n        <>\n            <div style={{ display: \"flex\", gap: \"10px\" }}>\n                <InputWrapper label=\"Radius\" labelForId=\"radius-input\">\n                    <input\n                        id=\"radius-input\"\n                        type=\"number\"\n                        value={radius}\n                        onChange={({ target }) => setRadius(target.valueAsNumber)}\n                    />\n                </InputWrapper>\n\n                <InputWrapper label=\"Number of points\" labelForId=\"points-input\">\n                    <input\n                        id=\"points-input\"\n                        type=\"number\"\n                        max={30}\n                        value={numberOfPoints}\n                        onChange={({ target }) => setNumberOfPoints(target.valueAsNumber)}\n                    />\n                </InputWrapper>\n\n                <InputWrapper label=\"Offset\" labelForId=\"offset-input\">\n                    <input\n                        id=\"offset-input\"\n                        type=\"number\"\n                        value={offset}\n                        onChange={({ target }) => setOffset(target.valueAsNumber)}\n                    />\n                </InputWrapper>\n            </div>\n\n            <div\n                style={{\n                    aspectRatio: 1,\n                    background: \"#FC0\",\n                    marginTop: \"20px\",\n                    borderRadius: \"50%\",\n                    position: \"relative\",\n                    display: \"inline-grid\",\n                    gridTemplateColumns: \"1fr 1fr\",\n                    alignItems: \"center\",\n                    pointerEvents: \"none\",\n                    userSelect: \"none\",\n                }}\n            >\n                {points.map((point, index) => (\n                    <div\n                        key={index}\n                        style={{\n                            position: \"absolute\",\n                            top: \"0%\",\n                            left: \"0%\",\n                            width: \"100%\",\n                            height: \"100%\",\n                            transform: `rotate(${point.degrees}deg) translateY(-50%)`,\n                            transition: \"all 0.4s ease-out\",\n                        }}\n                    >\n                        <div\n                            style={{\n                                position: \"absolute\",\n                                top: \"calc(50% - 4px)\",\n                                left: \"calc(50% - 3px)\",\n                                width: \"6px\",\n                                height: \"2px\",\n                                background: \"#900\",\n                            }}\n                        />\n                    </div>\n                ))}\n                <div />\n                <div\n                    style={{\n                        top: \"-0.75em\",\n                        padding: \"0 10px\",\n                        position: \"relative\",\n                        borderBottom: \"1px solid #900\",\n                    }}\n                >\n                    <div style={{ lineHeight: \"1.5em\" }}>r = {radius || 1}</div>\n                </div>\n            </div>\n\n            <Source\n                dark\n                code={`\nimport { getPointsOnCircle } from \"@baggie/core\";\n\nconst radius = ${radius || 1};\nconst numberOfPoints = ${Math.min(numberOfPoints || 0, 30)};\nconst offset = ${offset || 0};\n\nconst points = getPointsOnCircle({ radius, numberOfPoints, offset });\n/*\npoints = ${JSON.stringify(points.slice(0, 5), null, 4).replace(\n                    /}$/m,\n                    numberOfPoints > 5 ? \"},\\n    ...\" : \"}\",\n                )}\n*/\n`}\n            />\n        </>\n    );\n};\n","import { Example } from \"./Example\";\n\n# getPointsOnCircle\n\nGet an array of equally distanced points on the perimeter of a circle.\n\n## Parameters\n\n| Parameter          | Type     | Required |\n| :----------------- | :------- | :------: |\n| **radius**         | `number` |    ✔     |\n| **numberOfPoints** | `number` |    ✔     |\n| **offset**         | `number` |          |\n\n## Example\n\n<Example radius={10} numberOfPoints={5} offset={0} />\n"],"names":["getPointsOnCircle","radius","numberOfPoints","offset","result","degreesToFirstPoint","getPercentage","i","degrees","radians","degreesToRadians","Example","props","setRadius","useState","setNumberOfPoints","setOffset","points","useMemo","jsxs","Fragment","jsx","InputWrapper","target","point","index","Source","MDXContent","MDXLayout","_provideComponents","_jsx","_createMdxContent","_components","_jsxs","_Fragment"],"mappings":"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"}