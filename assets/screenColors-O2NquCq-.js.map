{"version":3,"file":"screenColors-O2NquCq-.js","sources":["../../packages/core/src/color/manipulate/screenColors/screenColors.ts","../../packages/core/src/color/manipulate/screenColors/Example.tsx","../../packages/core/src/color/manipulate/screenColors/screenColors.mdx"],"sourcesContent":["import { getMean } from \"../../../math\";\nimport { RGBA } from \"../../_interfaces/rgba.interface\";\nimport { convertStringToRgb } from \"../../convert/convertStringToRgb/convertStringToRgb\";\nimport { convertRgbToHex } from \"../../convert/convertRgbToHex/convertRgbToHex\";\n\n/**\n * Blend two colors together with the screen mode.\n */\nexport const screenColors = (colorA: string | RGBA, colorB: string | RGBA) => {\n    const rgb1 =\n        typeof colorA === \"string\" ? convertStringToRgb(colorA) : colorA;\n    const rgb2 =\n        typeof colorB === \"string\" ? convertStringToRgb(colorB) : colorB;\n    return convertRgbToHex({\n        red: Math.round(1 - (1 - rgb1.red) * (1 - rgb2.red)),\n        green: Math.round(1 - (1 - rgb1.green) * (1 - rgb2.green)),\n        blue: Math.round(1 - (1 - rgb1.blue) * (1 - rgb2.blue)),\n        alpha: Math.min(getMean([rgb1.alpha || 1, rgb2.alpha || 1]), 1),\n    });\n};\n","import React, { useMemo, useState } from \"react\";\nimport { Source } from \"@storybook/blocks\";\nimport { ColorViewer } from \"../../_components/ColorViewer/ColorViewer\";\nimport { ColorInput } from \"../../_components/ColorInput/ColorInput\";\nimport { screenColors } from \"./screenColors\";\n\ninterface Props {\n    colorA: string;\n    colorB: string;\n}\n\nexport const Example = (props: Props) => {\n    const [colorA, setColorA] = useState(props.colorA);\n    const [colorB, setColorB] = useState(props.colorB);\n\n    const mixed = useMemo(() => screenColors(colorA, colorB), [colorA, colorB]);\n\n    return (\n        <>\n            <div style={{ display: \"flex\", gap: \"10px\" }}>\n                <ColorInput label=\"Color A\" value={colorA} onChange={setColorA} />\n                <ColorInput label=\"Color B\" value={colorB} onChange={setColorB} />\n            </div>\n\n            <div style={{ marginTop: \"25px\" }}>\n                <ColorViewer color={mixed} />\n            </div>\n\n            <Source\n                dark\n                code={`\nimport { screenColors } from \"@baggie/core\";\n\nconst colorA = \"${colorA}\";\nconst colorB = \"${colorB}\";\n\nconst mixed = screenColors(colorA, colorB);\n// mixed = ${mixed ? `\"${mixed}\"` : \"undefined\"}\n`}\n            />\n        </>\n    );\n};\n","import { Example } from \"./Example\";\n\n# screenColors\n\nBlend two colors together with the screen mode.\n\nThe result will be lighter, since we're working with an additive color model (RGB).\nThis function is the opposite of `multiplyColors()`.\n\n> See https://en.wikipedia.org/wiki/Blend_modes\n\n## Parameters\n\n| Parameter  | Type     | Required | Description          |\n| :--------- | :------- | :------: | -------------------- |\n| **colorA** | `string` |    ✔     | The base color       |\n| **colorB** | `string` |    ✔     | The other base color |\n\n## Example\n\n<Example colorA=\"#ff0000\" colorB=\"#00ff00\" />\n"],"names":["screenColors","colorA","colorB","rgb1","convertStringToRgb","rgb2","convertRgbToHex","getMean","Example","props","setColorA","useState","setColorB","mixed","useMemo","jsxs","Fragment","jsx","ColorInput","ColorViewer","Source","_createMdxContent","_components","_provideComponents","_jsxs","_Fragment","_jsx","MDXContent","MDXLayout"],"mappings":"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"}