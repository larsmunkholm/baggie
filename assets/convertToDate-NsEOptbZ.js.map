{"version":3,"file":"convertToDate-NsEOptbZ.js","sources":["../../packages/core/src/string/convert/convertToDate/convertToDate.ts"],"sourcesContent":["interface DateObject {\n    day?: number | string;\n    month?: number | string;\n    year?: number | string;\n}\n\ninterface Options {\n    zeroBasedMonth?: boolean;\n    monthBeforeDay?: boolean;\n}\n\n/**\n * Convert a string (or an object) to a date.\n */\nexport const convertToDate = (\n    date: string | DateObject,\n    options?: Options,\n): Date | undefined => {\n    const { zeroBasedMonth = false, monthBeforeDay = false } = { ...options };\n    const dateObject: DateObject = {};\n    let dateArray: string[] = [];\n\n    if (typeof date === \"string\") {\n        dateArray = date.replace(/^[^0-9]+|[^0-9]+$/g, \"\").split(/[^0-9]+/);\n\n        if (\n            dateArray.length === 1 &&\n            (dateArray[0].length === 6 || dateArray[0].length === 8)\n        ) {\n            dateArray = [\n                dateArray[0].substring(0, 2),\n                dateArray[0].substring(2, 4),\n                dateArray[0].substring(4),\n            ];\n        } else if (dateArray.length !== 3) {\n            return undefined;\n        }\n    }\n\n    dateObject.day = Number(\n        (dateArray.length\n            ? monthBeforeDay\n                ? dateArray[1]\n                : dateArray[0]\n            : 0) || (date as DateObject).day,\n    );\n    dateObject.month = Number(\n        (dateArray.length\n            ? monthBeforeDay\n                ? dateArray[0]\n                : dateArray[1]\n            : 0) || (date as DateObject).month,\n    );\n    dateObject.year = Number(dateArray[2] || (date as DateObject).year);\n\n    const trueMonth = dateObject.month - (zeroBasedMonth ? 0 : 1);\n    const validDate = new Date(\n        `${String(dateObject.year).padStart(4, \"0\")}-${String(\n            trueMonth + 1,\n        ).padStart(2, \"0\")}-${String(dateObject.day).padStart(\n            2,\n            \"0\",\n        )}T00:00:00+00:00`,\n    );\n\n    if (\n        validDate.getDate() === dateObject.day &&\n        validDate.getMonth() === trueMonth &&\n        String(validDate.getFullYear()).endsWith(String(dateObject.year))\n    ) {\n        return validDate;\n    } else {\n        return undefined;\n    }\n};\n"],"names":["convertToDate","date","options","zeroBasedMonth","monthBeforeDay","dateObject","dateArray","trueMonth","validDate"],"mappings":"AAca,MAAAA,EAAgB,CACzBC,EACAC,IACmB,CACb,KAAA,CAAE,eAAAC,EAAiB,GAAO,eAAAC,EAAiB,IAAU,CAAE,GAAGF,GAC1DG,EAAyB,CAAA,EAC/B,IAAIC,EAAsB,CAAA,EAEtB,GAAA,OAAOL,GAAS,UAGhB,GAFAK,EAAYL,EAAK,QAAQ,qBAAsB,EAAE,EAAE,MAAM,SAAS,EAG9DK,EAAU,SAAW,IACpBA,EAAU,CAAC,EAAE,SAAW,GAAKA,EAAU,CAAC,EAAE,SAAW,GAE1CA,EAAA,CACRA,EAAU,CAAC,EAAE,UAAU,EAAG,CAAC,EAC3BA,EAAU,CAAC,EAAE,UAAU,EAAG,CAAC,EAC3BA,EAAU,CAAC,EAAE,UAAU,CAAC,CAAA,UAErBA,EAAU,SAAW,EACrB,OAIfD,EAAW,IAAM,QACZC,EAAU,OACLF,EACIE,EAAU,CAAC,EACXA,EAAU,CAAC,EACf,IAAOL,EAAoB,GAAA,EAErCI,EAAW,MAAQ,QACdC,EAAU,OACLF,EACIE,EAAU,CAAC,EACXA,EAAU,CAAC,EACf,IAAOL,EAAoB,KAAA,EAErCI,EAAW,KAAO,OAAOC,EAAU,CAAC,GAAML,EAAoB,IAAI,EAElE,MAAMM,EAAYF,EAAW,OAASF,EAAiB,EAAI,GACrDK,EAAgB,IAAA,KAClB,GAAG,OAAOH,EAAW,IAAI,EAAE,SAAS,EAAG,GAAG,CAAC,IAAI,OAC3CE,EAAY,CAAA,EACd,SAAS,EAAG,GAAG,CAAC,IAAI,OAAOF,EAAW,GAAG,EAAE,SACzC,EACA,GACH,CAAA,iBAAA,EAGL,GACIG,EAAU,YAAcH,EAAW,KACnCG,EAAU,aAAeD,GACzB,OAAOC,EAAU,YAAA,CAAa,EAAE,SAAS,OAAOH,EAAW,IAAI,CAAC,EAEzD,OAAAG,CAIf"}