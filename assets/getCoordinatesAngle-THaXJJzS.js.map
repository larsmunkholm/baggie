{"version":3,"file":"getCoordinatesAngle-THaXJJzS.js","sources":["../../packages/core/src/math/coordinates/angle/getCoordinatesAngle/getCoordinatesAngle.ts","../../packages/core/src/math/coordinates/distance/getDistance.ts","../../packages/core/src/math/coordinates/angle/getCoordinatesAngle/Example.tsx","../../packages/core/src/math/coordinates/angle/getCoordinatesAngle/getCoordinatesAngle.mdx"],"sourcesContent":["import { CoordinatesXY } from \"../../_interfaces/coordinatesXY.interface\";\nimport { radiansToDegrees } from \"../../../radians/radiansToDegrees\";\n\n/**\n * Get the angle from one set of coordinates to another.\n */\nexport const getCoordinatesAngle = (\n    from: CoordinatesXY,\n    to: CoordinatesXY,\n    options?: {\n        clockwise?: boolean;\n        offset?: number;\n    },\n): number => {\n    if (from.x === to.x && from.y === to.y) return 0;\n\n    const settings = {\n        clockwise: false,\n        offset: 0,\n        ...options,\n    };\n\n    const x = to.x - from.x;\n    const y = settings.clockwise ? to.y - from.y : from.y - to.y;\n    const theta = Math.atan2(y, x);\n    const angle = radiansToDegrees(theta) + (180 % 360) + settings.offset;\n\n    return settings.offset === 0\n        ? angle\n        : angle >= 360\n          ? angle - 360\n          : angle < 0\n            ? angle + 360\n            : angle;\n};\n","import { CoordinatesXY } from \"../_interfaces/coordinatesXY.interface\";\n\n/**\n * Get the distance between two sets of coordinates.\n *\n * @example\n * **Basic usage:**\n * ```ts\n * import { getDistance } from \"@baggie/core\";\n *\n * const from = { x: 10, y: 30 };\n * const to = { x: 20, y: 30 };\n *\n * const distance = getDistance(from, to);\n * // distance = 10\n * ```\n */\nexport const getDistance = (from: CoordinatesXY, to: CoordinatesXY): number =>\n    Math.sqrt(Math.pow(to.x - from.x, 2) + Math.pow(to.y - from.y, 2));\n","import React, { useMemo, useState } from \"react\";\nimport { InputWrapper } from \"@baggie/react\";\nimport { Source } from \"@storybook/blocks\";\nimport { CoordinatesXY } from \"../../_interfaces/coordinatesXY.interface\";\nimport { ceilToMultipleOf } from \"../../../rounding/ceilToMultipleOf/ceilToMultipleOf\";\nimport { floorToMultipleOf } from \"../../../rounding/floorToMultipleOf/floorToMultipleOf\";\nimport { getPercentageBetween } from \"../../../percentage/getPercentageBetween/getPercentageBetween\";\nimport { getPositionBetween } from \"../../../percentage/getPositionBetween/getPositionBetween\";\nimport { getPercentage } from \"../../../percentage/getPercentage/getPercentage\";\nimport { getDistance } from \"../../distance/getDistance\";\nimport { getCoordinatesAngle } from \"./getCoordinatesAngle\";\n\ninterface Props {\n    from: CoordinatesXY;\n    to: CoordinatesXY;\n}\n\nexport const Example = (props: Props) => {\n    const [fromX, setFromX] = useState(props.from.x);\n    const [fromY, setFromY] = useState(props.from.y);\n    const [toX, setToX] = useState(props.to.x);\n    const [toY, setToY] = useState(props.to.y);\n    const [offset, setOffset] = useState(0);\n    const [clockwise, setClockwise] = useState(false);\n\n    const angle = useMemo(\n        () =>\n            getCoordinatesAngle({ x: fromX, y: fromY }, { x: toX, y: toY }, { offset, clockwise }),\n        [fromX, fromY, toX, toY, offset, clockwise],\n    );\n\n    const csXMin = floorToMultipleOf(Math.min(fromY, toY, fromX, toX) - 20, 20);\n    const csXMax = ceilToMultipleOf(Math.max(fromY, toY, fromX, toX) + 20, 20);\n    const csYMin = floorToMultipleOf(Math.min(fromY, toY, fromX, toX) - 20, 20);\n    const csYMax = ceilToMultipleOf(Math.max(fromY, toY, fromX, toX) + 20, 20);\n\n    return (\n        <>\n            <div style={{ display: \"flex\", gap: \"10px\" }}>\n                <fieldset>\n                    <legend>From</legend>\n\n                    <InputWrapper label=\"X\" labelForId=\"from-x-input\">\n                        <input\n                            id=\"from-x-input\"\n                            value={fromX}\n                            type=\"number\"\n                            onChange={({ target }) => setFromX(target.valueAsNumber || 0)}\n                        />\n                    </InputWrapper>\n\n                    <InputWrapper label=\"Y\" labelForId=\"from-y-input\">\n                        <input\n                            id=\"from-y-input\"\n                            value={fromY}\n                            type=\"number\"\n                            onChange={({ target }) => setFromY(target.valueAsNumber || 0)}\n                        />\n                    </InputWrapper>\n                </fieldset>\n\n                <fieldset>\n                    <legend>To</legend>\n\n                    <InputWrapper label=\"X\" labelForId=\"to-x-input\">\n                        <input\n                            id=\"to-x-input\"\n                            value={toX}\n                            type=\"number\"\n                            onChange={({ target }) => setToX(target.valueAsNumber || 0)}\n                        />\n                    </InputWrapper>\n\n                    <InputWrapper label=\"Y\" labelForId=\"to-y-input\">\n                        <input\n                            id=\"to-y-input\"\n                            value={toY}\n                            type=\"number\"\n                            onChange={({ target }) => setToY(target.valueAsNumber || 0)}\n                        />\n                    </InputWrapper>\n                </fieldset>\n\n                <InputWrapper label=\"Offset\" labelForId=\"offset-input\">\n                    <input\n                        id=\"offset-input\"\n                        value={offset}\n                        type=\"number\"\n                        onChange={({ target }) => setOffset(target.valueAsNumber || 0)}\n                    />\n                </InputWrapper>\n\n                <InputWrapper label=\"Angle\" labelForId={undefined}>\n                    <div style={{ padding: \"5px 0\" }}>{angle}</div>\n                </InputWrapper>\n            </div>\n\n            <label>\n                <input\n                    type=\"checkbox\"\n                    checked={clockwise}\n                    onChange={() => setClockwise((current) => !current)}\n                />{\" \"}\n                Clockwise\n            </label>\n\n            <div\n                style={{\n                    display: \"grid\",\n                    gridTemplateColumns: \"min-content 1fr\",\n                    gridTemplateRows: \"1fr min-content\",\n                    marginTop: \"20px\",\n                    pointerEvents: \"none\",\n                    userSelect: \"none\",\n                }}\n            >\n                <div\n                    style={{\n                        paddingRight: \"5px\",\n                        textAlign: \"right\",\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"space-between\",\n                    }}\n                >\n                    <div style={{ transform: \"translateY(-0.5em)\" }}>{csYMax}</div>\n                    <div>{getPositionBetween(csYMax, csYMin, 0.5)}</div>\n                    <div style={{ transform: \"translateY(0.5em)\" }}>{csYMin}</div>\n                </div>\n                <div\n                    style={{\n                        background: \"#FC0\",\n                        boxShadow: \"0 0 0 1px #FC0\",\n                        width: \"200px\",\n                        height: \"200px\",\n                        position: \"relative\",\n                        overflow: \"hidden\",\n                    }}\n                >\n                    <div\n                        style={{\n                            position: \"absolute\",\n                            top: `${\n                                100 -\n                                getPercentageBetween(fromY, { from: csYMin, to: csYMax }) * 100\n                            }%`,\n                            left: `${\n                                getPercentageBetween(fromX, { from: csXMin, to: csXMax }) * 100\n                            }%`,\n                            width: `${\n                                getPercentage({\n                                    part: getDistance({ x: fromX, y: fromY }, { x: toX, y: toY }),\n                                    whole: getDistance(\n                                        { x: csXMin, y: csYMin },\n                                        { x: csXMax, y: csYMax },\n                                    ),\n                                }) *\n                                100 *\n                                Math.sqrt(2) *\n                                2\n                            }%`,\n                            height: `${\n                                getPercentage({\n                                    part: getDistance({ x: fromX, y: fromY }, { x: toX, y: toY }),\n                                    whole: getDistance(\n                                        { x: csXMin, y: csYMin },\n                                        { x: csXMax, y: csYMax },\n                                    ),\n                                }) *\n                                100 *\n                                Math.sqrt(2) *\n                                2\n                            }%`,\n                            transform: \"translate(-50%, -50%)\",\n                            backgroundImage: `conic-gradient(from ${\n                                clockwise ? offset + (270 - angle) : -90 - offset\n                            }deg, #fff ${angle}deg, #fff5 ${angle}deg)`,\n                            borderRadius: \"50%\",\n                        }}\n                    />\n                    <div\n                        style={{\n                            position: \"absolute\",\n                            left: \"50%\",\n                            height: \"100%\",\n                            borderRight: \"1px dashed #fff\",\n                        }}\n                    />\n                    <div\n                        style={{\n                            position: \"absolute\",\n                            top: \"50%\",\n                            width: \"100%\",\n                            borderTop: \"1px dashed #fff\",\n                        }}\n                    />\n                    <div\n                        style={{\n                            position: \"absolute\",\n                            top: `${\n                                100 -\n                                getPercentageBetween(fromY, { from: csYMin, to: csYMax }) * 100\n                            }%`,\n                            left: `${\n                                getPercentageBetween(fromX, { from: csXMin, to: csXMax }) * 100\n                            }%`,\n                            boxShadow: \"0 0 0 5px #000\",\n                        }}\n                    />\n                    <div\n                        style={{\n                            position: \"absolute\",\n                            top: `${\n                                100 - getPercentageBetween(toY, { from: csYMin, to: csYMax }) * 100\n                            }%`,\n                            left: `${\n                                getPercentageBetween(toX, { from: csXMin, to: csXMax }) * 100\n                            }%`,\n                            boxShadow: \"0 0 0 5px #c00\",\n                        }}\n                    />\n                </div>\n                <div />\n                <div\n                    style={{\n                        width: \"200px\",\n                        paddingRight: \"5px\",\n                        display: \"grid\",\n                        gridTemplateColumns: \"repeat(3, 1fr)\",\n                    }}\n                >\n                    <div style={{ transform: \"translateX(-1000cw)\" }}>{csXMin}</div>\n                    <div style={{ textAlign: \"center\" }}>\n                        {getPositionBetween(csXMax, csXMin, 0.5)}\n                    </div>\n                    <div style={{ textAlign: \"right\" }}>{csXMax}</div>\n                </div>\n            </div>\n\n            <Source\n                dark\n                code={`\nimport { getCoordinatesAngle } from \"@baggie/core\";\n\nconst from = { x: ${fromX}, y: ${fromY} };\nconst to = { x: ${toX}, y: ${toY} };\n\nconst angle = getCoordinatesAngle(from, to);\n// angle = ${angle}\n`}\n            />\n        </>\n    );\n};\n","import { Example } from \"./Example\";\n\n# getCoordinatesAngle\n\nGet the angle from one set of coordinates to another.\n\n> **Be aware** that angles in coordinate systems move counterclockwise,\n> hence this is the default setting. But you can change that in the options\n> argument by setting `clockwise: true`.\n\n## Parameters\n\n| Parameter   | Type                       | Required |\n| :---------- | :------------------------- | :------: |\n| **from**    | `{ x: number, y: number }` |    ✔     |\n| **to**      | `{ x: number, y: number }` |    ✔     |\n| **options** | `object`                   |          |\n\n| Option        | Type      | Description |\n| :------------ | :-------- | :---------: |\n| **clockwise** | `boolean` |             |\n| **offset**    | `number`  |             |\n\n## Example\n\n<Example from={{ x: 10, y: 10 }} to={{ x: 20, y: 20 }} />\n"],"names":["getCoordinatesAngle","from","to","options","settings","x","y","theta","angle","radiansToDegrees","getDistance","Example","props","fromX","setFromX","useState","fromY","setFromY","toX","setToX","toY","setToY","offset","setOffset","clockwise","setClockwise","useMemo","csXMin","floorToMultipleOf","csXMax","ceilToMultipleOf","csYMin","csYMax","jsxs","Fragment","jsx","InputWrapper","target","current","getPositionBetween","getPercentageBetween","getPercentage","Source","_createMdxContent","_components","_provideComponents","_jsxs","_Fragment","_jsx","MDXContent","MDXLayout"],"mappings":"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"}