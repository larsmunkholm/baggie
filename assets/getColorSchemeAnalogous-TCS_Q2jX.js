import{j as e}from"./jsx-runtime-vNq4Oc-g.js";import{r as c}from"./index-4g5l5LRQ.js";import{b}from"./index-CJNtjuy4.js";import{C as y}from"./ColorViewer-4nozgsQU.js";import{C}from"./ColorInput-p8BfKAZW.js";import{c as S}from"./convertHslToRgb-d-NiH81F.js";import{c as v}from"./convertRgbToHsl-ZqvJ4wqf.js";import{c as T}from"./convertStringToRgb-i6fsHOdH.js";import{c as m}from"./convertRgbToHex-k5LYStj_.js";import{I as x}from"./InputWrapper-7qBv-a2h.js";import{useMDXComponents as j}from"./index-_VGcpBFS.js";import"./_commonjsHelpers-4gQjN7DL.js";import"./iframe-5P6ZPecu.js";import"../sb-preview/runtime.js";import"./index-jmm5gWkb.js";import"./index-ogXoivrg.js";import"./index-MVbLLYTZ.js";import"./index-PPLHz8o0.js";import"./isHexColor-CJQw1lzT.js";import"./convertColorNameToHex-vzDEJkbb.js";import"./convertRangePosition-p6LuDhj_.js";import"./getPositionBetween-RxTUMZ_D.js";import"./getPercentageBetween-h4plVkI6.js";const _=(r,t=3,i=12)=>{const o=typeof r=="string"?r:m(r),a=typeof r=="string"?T(r):r,{hue:s,saturation:d,lightness:l,alpha:n}=v(a),h=[o],f=360/i;for(let p=1;p<=t-1;p+=1)h[h.length]=m(S({hue:(s+f*p)%360,saturation:d,lightness:l,alpha:n}));return h},u=r=>{const[t,i]=c.useState(r.color),[o,a]=c.useState(r.count),[s,d]=c.useState(r.steps),l=c.useMemo(()=>{try{return _(t,o,s)}catch{return[]}},[t,o,s]);return e.jsxs(e.Fragment,{children:[e.jsxs("div",{style:{display:"flex",gap:"10px"},children:[e.jsx(C,{label:"Color",value:t,onChange:i}),e.jsx(x,{label:"Count",labelForId:"count-input",children:e.jsx("input",{id:"count-input",type:"number",value:o,onChange:({target:n})=>a(n.valueAsNumber)})}),e.jsx(x,{label:"Steps",labelForId:"steps-input",helperText:'Should be at least be the same as "count"',children:e.jsx("input",{id:"steps-input",type:"number",value:s,onChange:({target:n})=>d(n.valueAsNumber)})})]}),e.jsx("div",{style:{marginTop:"25px",display:"flex",flexWrap:"wrap",gap:"10px"},children:l.map(n=>e.jsx(y,{color:n},n))},`${t}--${o}--${s}`),e.jsx(b,{dark:!0,code:`
import { getColorSchemeAnalogous } from "@baggie/core";

const color = "${t}";
const count = ${o};
const steps = ${s};

const scheme = getColorSchemeAnalogous(color, count, steps);
/*
scheme = ${JSON.stringify(l,null,4)}
*/
`})]})};try{u.displayName="Example",u.__docgenInfo={description:"",displayName:"Example",props:{color:{defaultValue:null,description:"",name:"color",required:!0,type:{name:"string"}},count:{defaultValue:null,description:"",name:"count",required:!0,type:{name:"number"}},steps:{defaultValue:null,description:"",name:"steps",required:!0,type:{name:"number"}}}}}catch{}function g(r){const t=Object.assign({h1:"h1",p:"p",h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",strong:"strong",code:"code"},j(),r.components);return e.jsxs(e.Fragment,{children:[e.jsx(t.h1,{id:"getcolorschemeanalogous",children:"getColorSchemeAnalogous"}),`
`,e.jsx(t.p,{children:"Get an analogous color scheme."}),`
`,e.jsx(t.p,{children:"These are colors that are next to each other on the color wheel."}),`
`,e.jsx(t.h2,{id:"parameters",children:"Parameters"}),`
`,e.jsxs(t.table,{children:[e.jsx(t.thead,{children:e.jsxs(t.tr,{children:[e.jsx(t.th,{align:"left",children:"Parameter"}),e.jsx(t.th,{align:"left",children:"Type"}),e.jsx(t.th,{align:"center",children:"Required"}),e.jsx(t.th,{align:"left",children:"Default value"}),e.jsx(t.th,{children:"Description"})]})}),e.jsxs(t.tbody,{children:[e.jsxs(t.tr,{children:[e.jsx(t.td,{align:"left",children:e.jsx(t.strong,{children:"color"})}),e.jsx(t.td,{align:"left",children:e.jsx(t.code,{children:"string"})}),e.jsx(t.td,{align:"center",children:"âœ”"}),e.jsx(t.td,{align:"left"}),e.jsx(t.td,{children:"The base color."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{align:"left",children:e.jsx(t.strong,{children:"count"})}),e.jsx(t.td,{align:"left",children:e.jsx(t.code,{children:"number"})}),e.jsx(t.td,{align:"center"}),e.jsx(t.td,{align:"left",children:e.jsx(t.code,{children:"3"})}),e.jsx(t.td,{children:"The amount of colors you want (including the base color)."})]}),e.jsxs(t.tr,{children:[e.jsx(t.td,{align:"left",children:e.jsx(t.strong,{children:"steps"})}),e.jsx(t.td,{align:"left",children:e.jsx(t.code,{children:"number"})}),e.jsx(t.td,{align:"center"}),e.jsx(t.td,{align:"left",children:e.jsx(t.code,{children:"12"})}),e.jsxs(t.td,{children:["The number of steps you want the color spectrum split into.",e.jsx("br",{}),e.jsxs(t.strong,{children:["Should be equal to or larger than ",e.jsx(t.code,{children:"count"})]})]})]})]})]}),`
`,e.jsx(t.h2,{id:"example",children:"Example"}),`
`,e.jsx(u,{color:"#ffcc00",count:3,steps:12})]})}function K(r={}){const{wrapper:t}=Object.assign({},j(),r.components);return t?e.jsx(t,Object.assign({},r,{children:e.jsx(g,r)})):g(r)}export{K as default};
