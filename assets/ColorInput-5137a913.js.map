{"version":3,"file":"ColorInput-5137a913.js","sources":["../../packages/core/src/color/convert/normalizeHexColor/normalizeHexColor.ts","../../packages/core/src/color/_components/ColorInput/ColorInput.tsx"],"sourcesContent":["import { isHexColor } from \"../../check/isHexColor/isHexColor\";\n\n/**\n * Make sure a hex color is in lowercase with 6 to 8 hexadecimals.\n */\nexport const normalizeHexColor = (hex: string) =>\n    isHexColor(hex)\n        ? (hex.length < 7\n              ? `#${hex\n                    .split(\"\")\n                    .slice(1)\n                    .map((char) => char + char)\n                    .join(\"\")}`\n              : hex\n          ).toLowerCase()\n        : hex;\n","import React, { useCallback, useId, useState } from \"react\";\nimport { InputWrapper } from \"@baggie/react\";\nimport { normalizeHexColor } from \"../../convert/normalizeHexColor/normalizeHexColor\";\nimport { convertColorNameToHex } from \"../../convert/convertColorNameToHex/convertColorNameToHex\";\nimport { isHexColor } from \"../../check/isHexColor/isHexColor\";\nimport S from \"./ColorInput.module.scss\";\n\ntype BaseProps = Omit<\n    React.DetailedHTMLProps<\n        React.InputHTMLAttributes<HTMLInputElement>,\n        HTMLInputElement\n    >,\n    \"children\" | \"onChange\" | \"value\" | \"pattern\" | \"ref\"\n> &\n    Omit<\n        React.ComponentProps<typeof InputWrapper>,\n        \"label\" | \"labelForId\" | \"children\"\n    >;\n\ninterface Props extends BaseProps {\n    label: string;\n    value: string;\n    onChange: (value: string) => void;\n}\n\nexport const ColorInput = React.forwardRef<HTMLInputElement, Props>(\n    (props, ref) => {\n        const [hasFocus, setHasFocus] = useState(false);\n        const {\n            id,\n            onChange,\n            onBlur,\n            onFocus,\n            onKeyDown,\n            value,\n            label,\n            labelRight,\n            helperText,\n            invalid,\n            className,\n            ...inputProps\n        } = props;\n        const autoId = useId();\n\n        const convertValue = useCallback(() => {\n            const trimmed = value.trim();\n            const startsWithHash = trimmed.startsWith(\"#\");\n            if (!startsWithHash) {\n                const hex = convertColorNameToHex(trimmed) || `#${trimmed}`;\n                if (isHexColor(hex)) {\n                    onChange(hex);\n                }\n            }\n        }, [onChange, value]);\n\n        const handleOnKeyDown = useCallback(\n            (event: React.KeyboardEvent<HTMLInputElement>) => {\n                if (event.key === \"Enter\") {\n                    convertValue();\n                }\n                if (onKeyDown) {\n                    onKeyDown(event);\n                }\n            },\n            [convertValue, onKeyDown],\n        );\n\n        const handleOnFocus = useCallback(\n            (event: React.FocusEvent<HTMLInputElement, HTMLInputElement>) => {\n                setHasFocus(true);\n                if (onFocus) {\n                    onFocus(event);\n                }\n            },\n            [onFocus],\n        );\n\n        const handleOnBlur = useCallback(\n            (event: React.FocusEvent<HTMLInputElement, HTMLInputElement>) => {\n                setHasFocus(false);\n                convertValue();\n                if (onBlur) {\n                    onBlur(event);\n                }\n            },\n            [convertValue, onBlur],\n        );\n\n        return (\n            <InputWrapper\n                label={label}\n                labelForId={id || autoId}\n                labelRight={labelRight}\n                helperText={helperText}\n                invalid={invalid}\n            >\n                <input\n                    ref={ref}\n                    id={id || autoId}\n                    value={value}\n                    onChange={({ target }) => onChange(target.value)}\n                    onKeyDown={handleOnKeyDown}\n                    onFocus={handleOnFocus}\n                    onBlur={handleOnBlur}\n                    className={[S.textInput, className].join(\" \").trim()}\n                    pattern=\"^#((([0-9a-f]{3}){1,2})|(([0-9a-f]{4}){1,2}))$\"\n                    {...inputProps}\n                />\n                <input\n                    type=\"color\"\n                    value={normalizeHexColor(value).substring(0, 7)}\n                    onChange={({ target }) => onChange(target.value)}\n                    className={S.colorInput}\n                    tabIndex={hasFocus ? undefined : -1}\n                />\n            </InputWrapper>\n        );\n    },\n);\n\nColorInput.displayName = \"ColorInput\";\n"],"names":["normalizeHexColor","hex","isHexColor","char","ColorInput","React","props","ref","hasFocus","setHasFocus","useState","id","onChange","onBlur","onFocus","onKeyDown","value","label","labelRight","helperText","invalid","className","inputProps","autoId","useId","convertValue","useCallback","trimmed","convertColorNameToHex","handleOnKeyDown","event","handleOnFocus","handleOnBlur","jsxs","InputWrapper","jsx","target","S"],"mappings":"iPAKO,MAAMA,EAAqBC,GAC9BC,EAAWD,CAAG,GACPA,EAAI,OAAS,EACR,IAAIA,EACC,MAAM,EAAE,EACR,MAAM,CAAC,EACP,IAAKE,GAASA,EAAOA,CAAI,EACzB,KAAK,EAAE,CAAC,GACbF,GACJ,cACFA,+ECUHG,EAAAC,EAAA,WAAyB,CAAAC,EAAAC,IAAA,CAExB,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACA,CAAM,GAAAC,EACF,SAAAC,EACA,OAAAC,EACA,QAAAC,EACA,UAAAC,EACA,MAAAC,EACA,MAAAC,EACA,WAAAC,EACA,WAAAC,EACA,QAAAC,EACA,UAAAC,EACA,GAAAC,CACG,EAAAhB,EAEPiB,EAAAC,EAAAA,QAEAC,EAAAC,EAAAA,YAAA,IAAA,CACI,MAAAC,EAAAX,EAAA,OAEA,GAAA,CADAW,EAAA,WAAA,GAAA,EACA,CACI,MAAA1B,EAAA2B,EAAAD,CAAA,GAAA,IAAAA,CAAA,GACAzB,EAAAD,CAAA,GACIW,EAAAX,CAAA,CACJ,CACJ,EAAA,CAAAW,EAAAI,CAAA,CAAA,EAGJa,EAAAH,EAAA,YAAwBI,GAAA,CAEhBA,EAAA,MAAA,SACIL,IAEJV,GACIA,EAAAe,CAAA,CACJ,EACJ,CAAAL,EAAAV,CAAA,CACwB,EAG5BgB,EAAAL,EAAA,YAAsBI,GAAA,CAEdrB,EAAA,EAAA,EACAK,GACIA,EAAAgB,CAAA,CACJ,EACJ,CAAAhB,CAAA,CACQ,EAGZkB,EAAAN,EAAA,YAAqBI,GAAA,CAEbrB,EAAA,EAAA,EACAgB,IACAZ,GACIA,EAAAiB,CAAA,CACJ,EACJ,CAAAL,EAAAZ,CAAA,CACqB,EAGzB,OAAAoB,EAAA,KACIC,EAAC,CAAA,MAAAjB,EACG,WAAAN,GAAAY,EACkB,WAAAL,EAClB,WAAAC,EACA,QAAAC,EACA,SAAA,CAEAe,EAAA,IAAA,QAAC,CAAA,IAAA5B,EACG,GAAAI,GAAAY,EACU,MAAAP,EACV,SAAA,CAAA,CAAA,OAAAoB,CAAA,IAAAxB,EAAAwB,EAAA,KAAA,EAC+C,UAAAP,EACpC,QAAAE,EACF,OAAAC,EACD,UAAA,CAAAK,EAAA,UAAAhB,CAAA,EAAA,KAAA,GAAA,EAAA,KAAA,EAC2C,QAAA,iDAC3C,GAAAC,CACJ,CAAA,EACRa,EAAA,IACA,QAAC,CAAA,KAAA,QACQ,MAAAnC,EAAAgB,CAAA,EAAA,UAAA,EAAA,CAAA,EACyC,SAAA,CAAA,CAAA,OAAAoB,CAAA,IAAAxB,EAAAwB,EAAA,KAAA,EACC,UAAAC,EAAA,WAClC,SAAA7B,EAAA,OAAA,EACoB,CAAA,CACrC,CAAA,CAAA,CACJ,CAGZ,EAEAJ,EAAA,YAAA"}