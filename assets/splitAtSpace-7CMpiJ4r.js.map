{"version":3,"file":"splitAtSpace-7CMpiJ4r.js","sources":["../../packages/core/src/string/manipulation/splitAtSpace/splitAtSpace.ts","../../packages/core/src/string/manipulation/splitAtSpace/Example.tsx","../../packages/core/src/string/manipulation/splitAtSpace/splitAtSpace.mdx"],"sourcesContent":["export const splitAtSpace = (string: string, nearestIndex: number) => {\n    const trimmed = string.trim();\n    const index = Math.max(nearestIndex, 1);\n    const regex = new RegExp(\n        `[\\\\S]{${index},}|([\\\\S].{0,${index - 1}}(?!\\\\S))`,\n        \"g\",\n    );\n\n    return trimmed.match(regex) || [trimmed];\n};\n","import React, { useMemo, useState } from \"react\";\nimport { Source } from \"@storybook/blocks\";\nimport { InputWrapper } from \"@baggie/react\";\nimport { splitAtSpace } from \"./splitAtSpace\";\n\ninterface Props {\n    string: string;\n    nearestIndex: number;\n}\n\nexport const Example = (props: Props) => {\n    const [string, setString] = useState(props.string);\n    const [nearestIndex, setNearestIndex] = useState(props.nearestIndex);\n\n    const output = useMemo(() => splitAtSpace(string, nearestIndex), [string, nearestIndex]);\n\n    return (\n        <>\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"10px\" }}>\n                <InputWrapper label=\"String\" labelForId=\"string-input\">\n                    <textarea\n                        id=\"string-input\"\n                        value={string}\n                        onChange={({ target }) => setString(target.value)}\n                        style={{ width: \"100%\", maxWidth: \"360px\" }}\n                        spellCheck={false}\n                        rows={3}\n                    />\n                </InputWrapper>\n\n                <InputWrapper label=\"Nearest index\" labelForId=\"nearest-index-input\">\n                    <input\n                        id=\"nearest-index-input\"\n                        value={nearestIndex}\n                        type=\"number\"\n                        onChange={({ target }) => setNearestIndex(target.valueAsNumber)}\n                    />\n                </InputWrapper>\n            </div>\n\n            <Source\n                dark\n                code={`\nimport { splitAtSpace } from \"@baggie/core\";\n\nconst string = \\`${string.replace(/`/g, \"\\\\`\")}\\`;\nconst nearestIndex = ${nearestIndex};\n\nconst output = splitAtSpace(input, nearestIndex);\n/*\noutput = ${JSON.stringify(output, null, 4)}\n*/\n`}\n            />\n        </>\n    );\n};\n","import { Example } from \"./Example\";\n\n# splitAtSpace\n\nSplit a string at the nearest previous whitespace to a given a index.\n\nWords will not get split.\n\n## Parameters\n\n| Parameter        | Type     | Required | Description                                             |\n| :--------------- | :------- | :------: | :------------------------------------------------------ |\n| **string**       | `string` |    ✔     | The string to split.                                    |\n| **nearestIndex** | `number` |    ✔     | Split at the nearest previous whitespace to this index. |\n\n## Examples\n\n<Example\n    string=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur turpis sapien, pellentesque pulvinar scelerisque sit amet, iaculis ac sem. Pellentesque lacus nisi, sagittis eget felis at, elementum accumsan tortor.\"\n    nearestIndex={80}\n/>\n\n<Example\n    string=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur turpis sapien, pellentesque pulvinar scelerisque sit amet, iaculis ac sem. Pellentesque lacus nisi, sagittis eget felis at, elementum accumsan tortor.\"\n    nearestIndex={10}\n/>\n"],"names":["splitAtSpace","string","nearestIndex","trimmed","index","regex","Example","props","setString","useState","setNearestIndex","output","useMemo","jsxs","Fragment","jsx","InputWrapper","target","Source","_createMdxContent","_components","_provideComponents","_jsxs","_Fragment","_jsx","MDXContent","MDXLayout"],"mappings":"8YAAa,MAAAA,EAAe,CAACC,EAAgBC,IAAyB,CAC5D,MAAAC,EAAUF,EAAO,OACjBG,EAAQ,KAAK,IAAIF,EAAc,CAAC,EAChCG,EAAQ,IAAI,OACd,SAASD,CAAK,gBAAgBA,EAAQ,CAAC,YACvC,GAAA,EAGJ,OAAOD,EAAQ,MAAME,CAAK,GAAK,CAACF,CAAO,CAC3C,ECCOG,EAAAC,GAAA,CACH,KAAA,CAAAN,EAAAO,CAAA,EAAAC,EAAAA,SAAAF,EAAA,MAAA,EACA,CAAAL,EAAAQ,CAAA,EAAAD,EAAAA,SAAAF,EAAA,YAAA,EAEAI,EAAAC,UAAA,IAAAZ,EAAAC,EAAAC,CAAA,EAAA,CAAAD,EAAAC,CAAA,CAAA,EAEA,OAAAW,EAAA,KAAAC,WAAA,CAAA,SAAA,CAEQD,EAAAA,KAAA,MAAA,CAAA,MAAA,CAAA,QAAA,OAAA,cAAA,SAAA,IAAA,MAAA,EAAA,SAAA,CACIE,EAAA,IAAAC,EAAA,CAAA,MAAA,SAAA,WAAA,eAAA,SAAAD,EAAA,IACI,WAAC,CAAA,GAAA,eACM,MAAAd,EACI,SAAA,CAAA,CAAA,OAAAgB,CAAA,IAAAT,EAAAS,EAAA,KAAA,EACyC,MAAA,CAAA,MAAA,OAAA,SAAA,OAAA,EACN,WAAA,GAC9B,KAAA,CACN,CAAA,EAAA,EAEdF,EAAA,IAAAC,EAAA,CAAA,MAAA,gBAAA,WAAA,sBAAA,SAAAD,EAAA,IAGI,QAAC,CAAA,GAAA,sBACM,MAAAb,EACI,KAAA,SACF,SAAA,CAAA,CAAA,OAAAe,CAAA,IAAAP,EAAAO,EAAA,aAAA,CACyD,CAAA,EAAA,CAEtE,EAAA,EACJF,EAAA,IAEAG,EAAC,CAAA,KAAA,GACO,KAAA;AAAA;AAAA;AAAA,mBACEjB,EAAA,QAAA,KAAA,KAAA,CAAA;AAAA,uBAGwBC,CAAA;AAAA;AAAA;AAAA;AAAA,WACX,KAAA,UAAAS,EAAA,KAAA,CAAA,CAAA;AAAA;AAAA,CAIO,CAAA,CAG9B,CAAA,CAAA,CAGZ,iSCpDA,SAASQ,EAAkBZ,EAAO,CAChC,MAAMa,EAAc,OAAO,OAAO,CAChC,GAAI,KACJ,EAAG,IACH,GAAI,KACJ,MAAO,QACP,MAAO,QACP,GAAI,KACJ,GAAI,KACJ,MAAO,QACP,GAAI,KACJ,OAAQ,SACR,KAAM,MACP,EAAEC,EAAoB,EAAEd,EAAM,UAAU,EACzC,OAAOe,EAAAA,KAAMC,EAAAA,SAAW,CACtB,SAAU,CAACC,EAAAA,IAAKJ,EAAY,GAAI,CAC9B,GAAI,eACJ,SAAU,cACX,CAAA,EAAG;AAAA,EAAMI,MAAKJ,EAAY,EAAG,CAC5B,SAAU,uEACX,CAAA,EAAG;AAAA,EAAMI,MAAKJ,EAAY,EAAG,CAC5B,SAAU,2BACX,CAAA,EAAG;AAAA,EAAMI,MAAKJ,EAAY,GAAI,CAC7B,GAAI,aACJ,SAAU,YACX,CAAA,EAAG;AAAA,EAAME,OAAMF,EAAY,MAAO,CACjC,SAAU,CAACI,EAAAA,IAAKJ,EAAY,MAAO,CACjC,SAAUE,EAAAA,KAAMF,EAAY,GAAI,CAC9B,SAAU,CAACI,EAAAA,IAAKJ,EAAY,GAAI,CAC9B,MAAO,OACP,SAAU,WACtB,CAAW,EAAGI,EAAAA,IAAKJ,EAAY,GAAI,CACvB,MAAO,OACP,SAAU,MACtB,CAAW,EAAGI,EAAAA,IAAKJ,EAAY,GAAI,CACvB,MAAO,SACP,SAAU,UACtB,CAAW,EAAGI,EAAAA,IAAKJ,EAAY,GAAI,CACvB,MAAO,OACP,SAAU,aACtB,CAAW,CAAC,CACZ,CAAS,CACT,CAAO,EAAGE,EAAAA,KAAMF,EAAY,MAAO,CAC3B,SAAU,CAACE,EAAAA,KAAMF,EAAY,GAAI,CAC/B,SAAU,CAACI,EAAAA,IAAKJ,EAAY,GAAI,CAC9B,MAAO,OACP,SAAUI,EAAAA,IAAKJ,EAAY,OAAQ,CACjC,SAAU,QACxB,CAAa,CACb,CAAW,EAAGI,EAAAA,IAAKJ,EAAY,GAAI,CACvB,MAAO,OACP,SAAUI,EAAAA,IAAKJ,EAAY,KAAM,CAC/B,SAAU,QACxB,CAAa,CACb,CAAW,EAAGI,EAAAA,IAAKJ,EAAY,GAAI,CACvB,MAAO,SACP,SAAU,GACtB,CAAW,EAAGI,EAAAA,IAAKJ,EAAY,GAAI,CACvB,MAAO,OACP,SAAU,sBACtB,CAAW,CAAC,CACZ,CAAS,EAAGE,EAAAA,KAAMF,EAAY,GAAI,CACxB,SAAU,CAACI,EAAAA,IAAKJ,EAAY,GAAI,CAC9B,MAAO,OACP,SAAUI,EAAAA,IAAKJ,EAAY,OAAQ,CACjC,SAAU,cACxB,CAAa,CACb,CAAW,EAAGI,EAAAA,IAAKJ,EAAY,GAAI,CACvB,MAAO,OACP,SAAUI,EAAAA,IAAKJ,EAAY,KAAM,CAC/B,SAAU,QACxB,CAAa,CACb,CAAW,EAAGI,EAAAA,IAAKJ,EAAY,GAAI,CACvB,MAAO,SACP,SAAU,GACtB,CAAW,EAAGI,EAAAA,IAAKJ,EAAY,GAAI,CACvB,MAAO,OACP,SAAU,yDACtB,CAAW,CAAC,CACZ,CAAS,CAAC,CACV,CAAO,CAAC,CACH,CAAA,EAAG;AAAA,EAAMI,MAAKJ,EAAY,GAAI,CAC7B,GAAI,WACJ,SAAU,UAChB,CAAK,EAAG;AAAA,EAAMI,EAAI,IAAClB,EAAS,CACtB,OAAQ,4NACR,aAAc,EACpB,CAAK,EAAG;AAAA,EAAMkB,EAAI,IAAClB,EAAS,CACtB,OAAQ,4NACR,aAAc,EACpB,CAAK,CAAC,CACN,CAAG,CACH,CACA,SAASmB,EAAWlB,EAAQ,GAAI,CAC9B,KAAM,CAAC,QAASmB,CAAS,EAAI,OAAO,OAAO,CAAE,EAAEL,EAAoB,EAAEd,EAAM,UAAU,EACrF,OAAOmB,EAAYF,EAAAA,IAAKE,EAAW,OAAO,OAAO,CAAE,EAAEnB,EAAO,CAC1D,SAAUiB,EAAAA,IAAKL,EAAmBZ,CAAK,CAC3C,CAAG,CAAC,EAAIY,EAAkBZ,CAAK,CAC/B"}