{"version":3,"file":"TextareaWithHighlights.stories-dbEPTOQc.js","sources":["../../packages/react/src/hooks/useForwardedRef/useForwardedRef.ts","../../packages/react/src/inputs/TextareaWithHighlights/hooks/useValueWithHighlights.tsx","../../packages/react/src/inputs/TextareaWithHighlights/TextareaWithHighlights.tsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\n\nexport const useForwardedRef = <T>(\n    forwardedRef: React.ForwardedRef<T>,\n    initialValue: any = null,\n): React.RefObject<T> => {\n    const innerRef = useRef<T>(initialValue);\n\n    useEffect(() => {\n        if (!forwardedRef) {\n            return;\n        }\n        if (typeof forwardedRef === \"function\") {\n            forwardedRef(innerRef.current);\n            return;\n        } else {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            forwardedRef.current = innerRef.current;\n        }\n    });\n\n    return innerRef;\n};\n","import React, { useMemo } from \"react\";\nimport { TextareaWithHighlightsProps } from \"../TextareaWithHighlights.props\";\n\nexport const useValueWithHighlights = (\n    value: string,\n    highlights: TextareaWithHighlightsProps[\"highlights\"],\n) =>\n    useMemo(() => {\n        // Escape now if the highlights argument is undefined\n        if (!highlights) return [];\n\n        // Split the highlights argument into categories\n        const { ranges, regexes, strings } = (\n            (Array.isArray(highlights)\n                ? typeof highlights[0] === \"number\"\n                    ? [highlights]\n                    : highlights\n                : [highlights]) as (string | [number, number] | RegExp)[]\n        ).reduce<{\n            ranges: [number, number][];\n            regexes: RegExp[];\n            strings: string[];\n        }>(\n            (acc, cur) => {\n                if (typeof cur === \"string\") {\n                    acc.strings.push(cur);\n                } else if (\n                    Array.isArray(cur) &&\n                    typeof cur[0] === \"number\" &&\n                    typeof cur[1] === \"number\"\n                ) {\n                    acc.ranges.push(cur);\n                } else if (cur instanceof RegExp) {\n                    acc.regexes.push(cur);\n                }\n                return acc;\n            },\n            { ranges: [], regexes: [], strings: [] },\n        );\n\n        // Escape now if no valid highlights are defined in the categories\n        if (!ranges.length && !regexes.length && !strings.length) return [];\n\n        // Go through strings to highlight and convert them to ranges\n        const stringsAsRanges: [number, number][] = [];\n        for (let string = 0; string < strings.length; string++) {\n            let i = -1;\n            while ((i = value.indexOf(strings[string], i + 1)) >= 0) {\n                stringsAsRanges.push([i, i + strings[string].length]);\n            }\n        }\n\n        // Go through regular expressions to highlight and convert them to ranges\n        const regexesAsRanges: [number, number][] = [];\n        for (let regex = 0; regex < regexes.length; regex++) {\n            const matches: [number, number][] = [];\n            if (regexes[regex].global) {\n                let prevIndex = -1;\n                let match: RegExpExecArray | null;\n                while (\n                    (match = regexes[regex].exec(value)) !== null &&\n                    (!matches.length || match.index > matches[prevIndex][0])\n                ) {\n                    matches.push([match.index, match.index + match[0].length]);\n                    prevIndex++;\n                }\n            } else {\n                const match = regexes[regex].exec(value);\n                if (match) {\n                    matches.push([match.index, match.index + match[0].length]);\n                }\n            }\n            regexesAsRanges.push(...matches);\n        }\n\n        // Concatenate all ranges into a single array\n        const allRanges = [...ranges, ...stringsAsRanges, ...regexesAsRanges];\n\n        // Escape now if no highlight ranges exist\n        if (!allRanges.length) return [];\n\n        // Sort the ranges\n        const sortedRanges = allRanges.sort((a, b) => a[0] - b[0]);\n\n        // Merge the ranges to avoid overlapping\n        const mergedRanges = [sortedRanges[0]];\n        for (let i = 1; i < sortedRanges.length; i++) {\n            const [start, end] = sortedRanges[i];\n            const prev = mergedRanges[mergedRanges.length - 1];\n            if (prev[1] >= start) {\n                prev[1] = Math.max(prev[1], end);\n            } else {\n                mergedRanges.push(sortedRanges[i]);\n            }\n        }\n\n        return [\n            value.slice(0, mergedRanges[0][0]),\n            ...mergedRanges.map(([from, to], index) => (\n                <React.Fragment key={`${from}:${to}`}>\n                    <mark>{value.slice(from, to)}</mark>\n                    {mergedRanges[index + 1]\n                        ? value.slice(to, mergedRanges[index + 1][0])\n                        : undefined}\n                </React.Fragment>\n            )),\n        ];\n    }, [value, highlights]);\n","import React, {\n    CSSProperties,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n} from \"react\";\nimport { useForwardedRef } from \"../../hooks/useForwardedRef/useForwardedRef\";\nimport { useValueWithHighlights } from \"./hooks/useValueWithHighlights\";\nimport { TextareaWithHighlightsProps } from \"./TextareaWithHighlights.props\";\nimport S from \"./TextareaWithHighlights.module.scss\";\n\ntype ChangeEvent = React.ChangeEvent<HTMLTextAreaElement>;\n\nexport const TextareaWithHighlights = forwardRef<\n    HTMLTextAreaElement,\n    TextareaWithHighlightsProps\n>(({ highlights, onChange, onScroll, ...props }, ref) => {\n    const [value, setValue] = useState(\n        String(props.value || props.defaultValue || \"\"),\n    );\n    const [style, setStyle] = useState<CSSProperties>();\n    const highlightAreaRef = useRef<HTMLDivElement>(null);\n    const textareaRef = useForwardedRef(ref);\n\n    const valueWithHighlights = useValueWithHighlights(value, highlights);\n\n    const handleChange = useCallback(\n        (event: ChangeEvent) => {\n            setValue(event.target.value);\n            if (onChange) {\n                onChange(event);\n            }\n        },\n        [onChange],\n    );\n\n    const handleScroll = useCallback(\n        (event: React.UIEvent<HTMLTextAreaElement, UIEvent>) => {\n            if (highlightAreaRef?.current) {\n                const target = event.target as HTMLTextAreaElement;\n                highlightAreaRef.current.scrollLeft = target.scrollLeft;\n                highlightAreaRef.current.scrollTop = target.scrollTop;\n            }\n\n            if (onScroll) {\n                onScroll(event);\n            }\n        },\n        [onScroll],\n    );\n\n    const copySize = useCallback((entry: ResizeObserverEntry) => {\n        if (highlightAreaRef?.current && entry) {\n            const width = entry.borderBoxSize[0].inlineSize;\n            const height = entry.borderBoxSize[0].blockSize;\n            highlightAreaRef.current.style.width = `${width}px`;\n            highlightAreaRef.current.style.height = `${height}px`;\n        }\n    }, []);\n\n    const copyStyle = useCallback(() => {\n        const computedStyle = window.getComputedStyle(\n            textareaRef.current as HTMLTextAreaElement,\n        );\n        const filteredStyles = {\n            font: computedStyle.getPropertyValue(\"font\"),\n            letterSpacing: computedStyle.getPropertyValue(\"letter-spacing\"),\n            whiteSpace: computedStyle.getPropertyValue(\"white-space\"),\n            padding: computedStyle.getPropertyValue(\"padding\"),\n            border: computedStyle.getPropertyValue(\"border\"),\n            wordWrap: computedStyle.getPropertyValue(\"word-wrap\"),\n            verticalAlign: computedStyle.getPropertyValue(\"vertical-align\"),\n            textIndent: computedStyle.getPropertyValue(\"text-indent\"),\n        };\n        setStyle(filteredStyles as CSSProperties);\n    }, [textareaRef]);\n\n    useEffect(() => {\n        if (textareaRef.current) {\n            copyStyle();\n\n            const resizeObserver = new ResizeObserver((entries) =>\n                copySize(entries[0]),\n            );\n            resizeObserver.observe(textareaRef.current);\n\n            return () => {\n                resizeObserver.disconnect();\n            };\n        }\n    }, [textareaRef, copySize, copyStyle]);\n\n    return (\n        <>\n            <span\n                ref={highlightAreaRef}\n                style={{\n                    ...props.style,\n                    ...style,\n                    backgroundColor: props.style?.backgroundColor || \"#fff\",\n                    background: props.style?.background,\n                }}\n                className={S.highlightArea}\n                aria-hidden={true}\n            >\n                {valueWithHighlights}\n            </span>\n            <textarea\n                ref={textareaRef}\n                onChange={handleChange}\n                onScroll={handleScroll}\n                {...props}\n                style={{\n                    ...props.style,\n                    background: \"transparent\",\n                    position: \"relative\",\n                    zIndex: 1,\n                }}\n            />\n        </>\n    );\n});\n\nTextareaWithHighlights.displayName = \"TextareaWithHighlights\";\n"],"names":["useForwardedRef","forwardedRef","initialValue","innerRef","useRef","useEffect","useValueWithHighlights","value","highlights","useMemo","ranges","regexes","strings","acc","cur","stringsAsRanges","string","i","regexesAsRanges","regex","matches","prevIndex","match","allRanges","sortedRanges","a","b","mergedRanges","start","end","prev","from","to","index","jsxs","React","jsx","TextareaWithHighlights","forwardRef","onChange","onScroll","props","ref","setValue","useState","style","setStyle","highlightAreaRef","textareaRef","valueWithHighlights","handleChange","useCallback","event","handleScroll","target","copySize","entry","width","height","copyStyle","computedStyle","filteredStyles","resizeObserver","entries","Fragment","_a","_b","S"],"mappings":"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"}