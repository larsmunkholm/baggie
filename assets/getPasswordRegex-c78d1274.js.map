{"version":3,"file":"getPasswordRegex-c78d1274.js","sources":["../../packages/core/src/string/regex/getPasswordRegex/Example.tsx","../../packages/core/src/string/regex/getPasswordRegex/getPasswordRegex.mdx"],"sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport { Source } from \"@storybook/blocks\";\nimport { InputWrapper } from \"@baggie/react\";\nimport { getPasswordRegex, passwordSpecialCharactersDefault } from \"./getPasswordRegex\";\n\ninterface Props {\n    password?: string;\n}\n\nexport const Example = (props: Props) => {\n    const [password, setPassword] = useState(props.password || \"\");\n    const [minLength, setMinLength] = useState<number>();\n    const [maxLength, setMaxLength] = useState<number>();\n    const [minDigits, setMinDigits] = useState<number>();\n    const [minLowercase, setMinLowercase] = useState<number>();\n    const [minUppercase, setMinUppercase] = useState<number>();\n    const [minSpecial, setMinSpecial] = useState<number>();\n    const [specialCharacters, setSpecialCharacters] = useState<string>();\n    const [forbiddenCharacters, setForbiddenCharacters] = useState<string>();\n    const [allowUnicode, setAllowUnicode] = useState(false);\n\n    const { options, isValid } = useMemo(() => {\n        const optionsObj = {\n            minLength,\n            maxLength,\n            minDigits,\n            minLowercase,\n            minUppercase,\n            minSpecial,\n            specialCharacters,\n            forbiddenCharacters,\n            allowUnicode,\n        };\n\n        return {\n            options: Object.fromEntries(\n                Object.entries(optionsObj).filter(\n                    (entry) => typeof entry[1] !== \"undefined\" && entry[1] !== false,\n                ),\n            ),\n            isValid: getPasswordRegex(optionsObj).test(password),\n        };\n    }, [\n        password,\n        minLength,\n        maxLength,\n        minDigits,\n        minLowercase,\n        minUppercase,\n        minSpecial,\n        specialCharacters,\n        forbiddenCharacters,\n        allowUnicode,\n    ]);\n\n    const hasOptionSet = Object.keys(options).length;\n\n    return (\n        <>\n            <div style={{ display: \"flex\", flexWrap: \"wrap\", gap: \"10px\" }}>\n                <InputWrapper label=\"Password\" labelForId=\"password-input\">\n                    <input\n                        id=\"password-input\"\n                        value={password}\n                        onChange={({ target }) => setPassword(target.value)}\n                        spellCheck={false}\n                    />\n                </InputWrapper>\n\n                <InputWrapper label=\"Is valid\" labelForId={undefined}>\n                    {isValid ? \"true\" : \"false\"}\n                </InputWrapper>\n            </div>\n            <div style={{ marginTop: \"10px\", display: \"flex\", flexWrap: \"wrap\", gap: \"10px\" }}>\n                <InputWrapper label=\"Min length\" labelForId=\"minLength\">\n                    <input\n                        id=\"minLength\"\n                        type=\"number\"\n                        value={isNaN(minLength as number) ? \"\" : minLength}\n                        placeholder={Math.min(\n                            8,\n                            typeof maxLength === \"undefined\" ? 8 : maxLength,\n                        ).toString()}\n                        onChange={({ target }) =>\n                            setMinLength(\n                                isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber,\n                            )\n                        }\n                    />\n                </InputWrapper>\n\n                <InputWrapper label=\"Max length\" labelForId=\"maxLength\">\n                    <input\n                        id=\"maxLength\"\n                        type=\"number\"\n                        value={isNaN(maxLength as number) ? \"\" : maxLength}\n                        onChange={({ target }) =>\n                            setMaxLength(\n                                isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber,\n                            )\n                        }\n                    />\n                </InputWrapper>\n\n                <InputWrapper label=\"Min digits\" labelForId=\"minDigits\">\n                    <input\n                        id=\"minDigits\"\n                        type=\"number\"\n                        value={isNaN(minDigits as number) ? \"\" : minDigits}\n                        placeholder=\"1\"\n                        onChange={({ target }) =>\n                            setMinDigits(\n                                isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber,\n                            )\n                        }\n                    />\n                </InputWrapper>\n\n                <InputWrapper label=\"Min lowercase\" labelForId=\"minLowercase\">\n                    <input\n                        id=\"minLowercase\"\n                        type=\"number\"\n                        value={isNaN(minLowercase as number) ? \"\" : minLowercase}\n                        placeholder=\"1\"\n                        onChange={({ target }) =>\n                            setMinLowercase(\n                                isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber,\n                            )\n                        }\n                    />\n                </InputWrapper>\n\n                <InputWrapper label=\"Min uppercase\" labelForId=\"minUppercase\">\n                    <input\n                        id=\"minUppercase\"\n                        type=\"number\"\n                        value={isNaN(minUppercase as number) ? \"\" : minUppercase}\n                        placeholder=\"1\"\n                        onChange={({ target }) =>\n                            setMinUppercase(\n                                isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber,\n                            )\n                        }\n                    />\n                </InputWrapper>\n\n                <InputWrapper label=\"Min special\" labelForId=\"minSpecial\">\n                    <input\n                        id=\"minSpecial\"\n                        type=\"number\"\n                        value={isNaN(minSpecial as number) ? \"\" : minSpecial}\n                        placeholder=\"1\"\n                        onChange={({ target }) =>\n                            setMinSpecial(\n                                isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber,\n                            )\n                        }\n                    />\n                </InputWrapper>\n\n                <InputWrapper label=\"Special characters\" labelForId=\"specialCharacters\">\n                    <input\n                        id=\"specialCharacters\"\n                        value={specialCharacters || \"\"}\n                        placeholder={passwordSpecialCharactersDefault}\n                        onChange={({ target }) => setSpecialCharacters(target.value || undefined)}\n                    />\n                </InputWrapper>\n\n                <InputWrapper label=\"Forbidden characters\" labelForId=\"forbiddenCharacters\">\n                    <input\n                        id=\"forbiddenCharacters\"\n                        value={forbiddenCharacters || \"\"}\n                        onChange={({ target }) => setForbiddenCharacters(target.value || undefined)}\n                    />\n                </InputWrapper>\n\n                <InputWrapper label=\"Allow unicode\" labelForId=\"allowUnicode\">\n                    <input\n                        id=\"allowUnicode\"\n                        type=\"checkbox\"\n                        checked={allowUnicode}\n                        onChange={() => setAllowUnicode((current) => !current)}\n                    />\n                </InputWrapper>\n            </div>\n\n            <Source\n                dark\n                code={`\nimport { getPasswordRegex } from \"@baggie/core\";\n\nconst password = \\`${password.replace(/`/g, \"\\\\`\")}\\`;\n${hasOptionSet ? `const options = ${JSON.stringify(options, null, 4)};\\n` : \"\"}\nconst isValid = getPasswordRegex(${hasOptionSet ? \"options\" : \"\"}).test(password);\n// isValid = ${isValid ? \"true\" : \"false\"}\n`}\n            />\n\n            <b>The returned regex:</b>\n\n            <Source\n                dark\n                code={`new RegExp(\"${getPasswordRegex(options).source}\", \"${\n                    getPasswordRegex(options).flags\n                }\")`}\n            />\n        </>\n    );\n};\n","import { Example } from \"./Example\";\n\n# getPasswordRegex\n\nReturns a regular expression to validate passwords with.\n\n## Parameters\n\n| Parameter   | Type     | Required |\n| :---------- | :------- | :------: |\n| **options** | `object` |          |\n\n| Option                  | Type      | Default value                              |\n| :---------------------- | :-------- | :----------------------------------------- |\n| **minLength**           | `number`  | `8`                                        |\n| **maxLength**           | `number`  |                                            |\n| **minDigits**           | `number`  | `1`                                        |\n| **minLowercase**        | `number`  | `1`                                        |\n| **minUppercase**        | `number`  | `1`                                        |\n| **minSpecial**          | `number`  | `1`                                        |\n| **specialCharacters**   | `string`  | ``\"!#$€%&§'()*+,./:;<=>?@[]\\^_`´{\\|}~¨-\"`` |\n| **forbiddenCharacters** | `string`  |                                            |\n| **allowUnicode**        | `boolean` | `false`                                    |\n\n## Example\n\n<Example password=\"abcde_F1\" />\n"],"names":["Example","props","password","setPassword","useState","minLength","setMinLength","maxLength","setMaxLength","minDigits","setMinDigits","minLowercase","setMinLowercase","minUppercase","setMinUppercase","minSpecial","setMinSpecial","specialCharacters","setSpecialCharacters","forbiddenCharacters","setForbiddenCharacters","allowUnicode","setAllowUnicode","options","isValid","useMemo","optionsObj","entry","getPasswordRegex","hasOptionSet","jsxs","Fragment","jsx","InputWrapper","target","passwordSpecialCharactersDefault","current","Source","MDXContent","MDXLayout","_provideComponents","_jsx","_createMdxContent","_components","_jsxs","_Fragment"],"mappings":"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"}