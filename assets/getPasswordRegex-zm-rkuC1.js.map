{"version":3,"file":"getPasswordRegex-zm-rkuC1.js","sources":["../../packages/core/src/string/regex/getPasswordRegex/getPasswordRegex.ts"],"sourcesContent":["import { PasswordOptions } from \"../../_interfaces/passwordOptions.interface\";\n\n/**\n * A string with the default accepted special character used by\n * `getPasswordRegex`.\n */\nexport const passwordSpecialCharactersDefault =\n    \"!#$€%&§'()*+,./:;<=>?@[]\\\\^_`´{|}~¨-\";\n\n/**\n * Returns a regular expression to validate passwords with.\n *\n * Define your requirements for a valid password by setting the following parameters.\n * - minLength - defaults to `8`\n * - maxLength\n * - minDigits - defaults to `1`\n * - minLowercase - defaults to `1`\n * - minUppercase - defaults to `1`\n * - minSpecial - defaults to `1`\n * - specialCharacters - defaults to {@link passwordSpecialCharactersDefault}\n * - forbiddenCharacters\n * - allowUnicode - defaults to `false`\n */\nexport const getPasswordRegex = (options?: PasswordOptions): RegExp => {\n    const passwordSettings: PasswordOptions = {\n        ...options,\n        minLength: Math.max(\n            0,\n            typeof options?.minLength === \"number\"\n                ? options.minLength\n                : Math.min(8, options?.maxLength || Infinity),\n        ),\n        minDigits: Math.max(\n            0,\n            typeof options?.minDigits === \"number\" ? options.minDigits : 1,\n            0,\n        ),\n        minLowercase: Math.max(\n            0,\n            typeof options?.minLowercase === \"number\"\n                ? options.minLowercase\n                : 1,\n            0,\n        ),\n        minUppercase: Math.max(\n            0,\n            typeof options?.minUppercase === \"number\"\n                ? options.minUppercase\n                : 1,\n            0,\n        ),\n        minSpecial: Math.max(\n            0,\n            typeof options?.minSpecial === \"number\" ? options.minSpecial : 1,\n            0,\n        ),\n        specialCharacters:\n            options?.specialCharacters || passwordSpecialCharactersDefault,\n        forbiddenCharacters:\n            typeof options?.forbiddenCharacters === \"string\"\n                ? options.forbiddenCharacters\n                : \"\",\n        allowUnicode: options?.allowUnicode || false,\n    };\n\n    const hasMaxLength = typeof passwordSettings.maxLength === \"number\";\n\n    const lowercaseLetters = passwordSettings.allowUnicode\n        ? \"\\\\p{Ll}\"\n        : \"[a-z]\";\n    const uppercaseLetters = passwordSettings.allowUnicode\n        ? \"\\\\p{Lu}\"\n        : \"[A-Z]\";\n    const specialChars = passwordSettings.specialCharacters\n        ? passwordSettings.specialCharacters.replace(/[\\^\\-\\]\\\\]/g, \"\\\\$&\")\n        : \"\";\n\n    return new RegExp(\n        `^${\n            passwordSettings.forbiddenCharacters\n                ? `(?!(?:.*[${passwordSettings.forbiddenCharacters}].*){1,})`\n                : \"\"\n        }(?=(.*${lowercaseLetters}.*){${\n            passwordSettings.minLowercase as number\n        },})(?=(.*${uppercaseLetters}.*){${\n            passwordSettings.minUppercase as number\n        },})(?=(.*\\\\d.*){${\n            passwordSettings.minDigits as number\n        },})(?=(.*[${specialChars}].*){${\n            passwordSettings.minSpecial as number\n        },}).{${passwordSettings.minLength as number},${\n            hasMaxLength\n                ? Math.max(\n                      passwordSettings.minLength as number,\n                      passwordSettings.maxLength as number,\n                  )\n                : \"\"\n        }}$`,\n        passwordSettings.allowUnicode ? \"u\" : \"\",\n    );\n};\n"],"names":["passwordSpecialCharactersDefault","getPasswordRegex","options","passwordSettings","hasMaxLength","lowercaseLetters","uppercaseLetters","specialChars"],"mappings":"AAMO,MAAMA,EACT,uCAgBSC,EAAoBC,GAAsC,CACnE,MAAMC,EAAoC,CACtC,GAAGD,EACH,UAAW,KAAK,IACZ,EACA,OAAOA,GAAA,YAAAA,EAAS,YAAc,SACxBA,EAAQ,UACR,KAAK,IAAI,GAAGA,GAAA,YAAAA,EAAS,YAAa,GAAQ,CACpD,EACA,UAAW,KAAK,IACZ,EACA,OAAOA,GAAA,YAAAA,EAAS,YAAc,SAAWA,EAAQ,UAAY,EAC7D,CACJ,EACA,aAAc,KAAK,IACf,EACA,OAAOA,GAAA,YAAAA,EAAS,eAAiB,SAC3BA,EAAQ,aACR,EACN,CACJ,EACA,aAAc,KAAK,IACf,EACA,OAAOA,GAAA,YAAAA,EAAS,eAAiB,SAC3BA,EAAQ,aACR,EACN,CACJ,EACA,WAAY,KAAK,IACb,EACA,OAAOA,GAAA,YAAAA,EAAS,aAAe,SAAWA,EAAQ,WAAa,EAC/D,CACJ,EACA,mBACIA,GAAA,YAAAA,EAAS,oBAAqBF,EAClC,oBACI,OAAOE,GAAA,YAAAA,EAAS,sBAAwB,SAClCA,EAAQ,oBACR,GACV,cAAcA,GAAA,YAAAA,EAAS,eAAgB,EAAA,EAGrCE,EAAe,OAAOD,EAAiB,WAAc,SAErDE,EAAmBF,EAAiB,aACpC,UACA,QACAG,EAAmBH,EAAiB,aACpC,UACA,QACAI,EAAeJ,EAAiB,kBAChCA,EAAiB,kBAAkB,QAAQ,cAAe,MAAM,EAChE,GAEN,OAAO,IAAI,OACP,IACIA,EAAiB,oBACX,YAAYA,EAAiB,mBAAmB,YAChD,EACV,SAASE,CAAgB,OACrBF,EAAiB,YACrB,YAAYG,CAAgB,OACxBH,EAAiB,YACrB,mBACIA,EAAiB,SACrB,aAAaI,CAAY,QACrBJ,EAAiB,UACrB,QAAQA,EAAiB,SAAmB,IACxCC,EACM,KAAK,IACDD,EAAiB,UACjBA,EAAiB,SAAA,EAErB,EACV,KACAA,EAAiB,aAAe,IAAM,EAAA,CAE9C"}