{"version":3,"file":"mergeIntervals-da6ca95d.js","sources":["../../packages/core/src/math/range/mergeIntervals/mergeIntervals.ts"],"sourcesContent":["import { Range } from \"../_interfaces/range.interface\";\nimport { normalizeRanges } from \"../_helpers/normalizeRanges\";\n\n/**\n * Merge and combine overlapping intervals.\n */\nexport const mergeIntervals = (\n    intervals: Range | Range[],\n    combineEquals = true,\n) => {\n    const intervalArrays = normalizeRanges(intervals);\n\n    if (intervalArrays.length < 2) return intervalArrays;\n\n    intervalArrays.sort((a, b) => a.from - b.from);\n\n    const result: { from: number; to: number }[] = [];\n    let previous = intervalArrays[0];\n\n    for (let i = 1; i < intervalArrays.length; i += 1) {\n        if (\n            combineEquals\n                ? previous.to >= intervalArrays[i].from\n                : previous.to > intervalArrays[i].from\n        ) {\n            previous = {\n                from: previous.from,\n                to: Math.max(previous.to, intervalArrays[i].to),\n            };\n        } else {\n            result.push(previous);\n            previous = intervalArrays[i];\n        }\n    }\n\n    result.push(previous);\n\n    return result;\n};\n"],"names":["mergeIntervals","intervals","combineEquals","intervalArrays","normalizeRanges","a","b","result","previous","i"],"mappings":"kDAMO,MAAMA,EAAiB,CAC1BC,EACAC,EAAgB,KACf,CACK,MAAAC,EAAiBC,EAAgBH,CAAS,EAEhD,GAAIE,EAAe,OAAS,EAAU,OAAAA,EAEtCA,EAAe,KAAK,CAACE,EAAGC,IAAMD,EAAE,KAAOC,EAAE,IAAI,EAE7C,MAAMC,EAAyC,CAAA,EAC3C,IAAAC,EAAWL,EAAe,CAAC,EAE/B,QAASM,EAAI,EAAGA,EAAIN,EAAe,OAAQM,GAAK,GAExCP,EACMM,EAAS,IAAML,EAAeM,CAAC,EAAE,KACjCD,EAAS,GAAKL,EAAeM,CAAC,EAAE,MAE3BD,EAAA,CACP,KAAMA,EAAS,KACf,GAAI,KAAK,IAAIA,EAAS,GAAIL,EAAeM,CAAC,EAAE,EAAE,CAAA,GAGlDF,EAAO,KAAKC,CAAQ,EACpBA,EAAWL,EAAeM,CAAC,GAInC,OAAAF,EAAO,KAAKC,CAAQ,EAEbD,CACX"}